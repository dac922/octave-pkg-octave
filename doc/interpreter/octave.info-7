This is /home/jwe/src/octave/doc/interpreter/octave.info, produced by makeinfo version 4.13 from /home/jwe/src/octave/doc/interpreter/octave.texi.

START-INFO-DIR-ENTRY
* Octave: (octave).           Interactive language for numerical computations.

END-INFO-DIR-ENTRY

   Copyright (C) 1996, 1997, 1999, 2000, 2001, 2002, 2005, 2006, 2007,
2011 John W. Eaton.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: octave.info,  Node: Obsolete Functions,  Next: Trouble,  Prev: Contributing Guidelines,  Up: Top

Appendix E Obsolete Functions
*****************************

After being marked as deprecated for two major releases, the following
functions have been removed from Octave.  The third column of the table
shows the version of Octave in which the function was removed.  Prior to
removal, each function in the list was marked as deprecated for at least
two major releases.  All deprecated functions issue warnings explaining
that they will be removed in a future version of Octave, and which
function should be used instead.

   Replacement functions do not always accept precisely the same
arguments as the obsolete function, but should provide equivalent
functionality.

Obsolete Function      Replacement            Version
---------------------------------------------------------- 
`beta_cdf'             `betacdf'              3.4.0
`beta_inv'             `betainv'              3.4.0
`beta_pdf'             `betapdf'              3.4.0
`beta_rnd'             `betarnd'              3.4.0
`binomial_cdf'         `binocdf'              3.4.0
`binomial_inv'         `binoinv'              3.4.0
`binomial_pdf'         `binopdf'              3.4.0
`binomial_rnd'         `binornd'              3.4.0
`chisquare_cdf'        `chi2cdf'              3.4.0
`chisquare_inv'        `chi2inv'              3.4.0
`chisquare_pdf'        `chi2pdf'              3.4.0
`chisquare_rnd'        `chi2rnd'              3.4.0
`clearplot'            `clf'                  3.4.0
`com2str'              `num2str'              3.4.0
`exponential_cdf'      `expcdf'               3.4.0
`exponential_inv'      `expinv'               3.4.0
`exponential_pdf'      `exppdf'               3.4.0
`exponential_rnd'      `exprnd'               3.4.0
`f_cdf'                `fcdf'                 3.4.0
`f_inv'                `finv'                 3.4.0
`f_pdf'                `fpdf'                 3.4.0
`f_rnd'                `frnd'                 3.4.0
`gamma_cdf'            `gamcdf'               3.4.0
`gamma_inv'            `gaminv'               3.4.0
`gamma_pdf'            `gampdf'               3.4.0
`gamma_rnd'            `gamrnd'               3.4.0
`geometric_cdf'        `geocdf'               3.4.0
`geometric_inv'        `geoinv'               3.4.0
`geometric_pdf'        `geopdf'               3.4.0
`geometric_rnd'        `geornd'               3.4.0
`hypergeometric_cdf'   `hygecdf'              3.4.0
`hypergeometric_inv'   `hygeinv'              3.4.0
`hypergeometric_pdf'   `hygepdf'              3.4.0
`hypergeometric_rnd'   `hygernd'              3.4.0
`intersection'         `intersect'            3.4.0
`is_bool'              `isbool'               3.4.0
`is_complex'           `iscomplex'            3.4.0
`is_list'              `islist'               3.4.0
`is_matrix'            `ismatrix'             3.4.0
`is_scalar'            `isscalar'             3.4.0
`is_square'            `issquare'             3.4.0
`is_stream'            `isstream'             3.4.0
`is_struct'            `isstruct'             3.4.0
`is_symmetric'         `issymmetric'          3.4.0
`is_vector'            `isvector'             3.4.0
`lognormal_cdf'        `logncdf'              3.4.0
`lognormal_inv'        `logninv'              3.4.0
`lognormal_pdf'        `lognpdf'              3.4.0
`lognormal_rnd'        `lognrnd'              3.4.0
`meshdom'              `meshgrid'             3.4.0
`normal_cdf'           `normcdf'              3.4.0
`normal_inv'           `norminv'              3.4.0
`normal_pdf'           `normpdf'              3.4.0
`normal_rnd'           `normrnd'              3.4.0
`pascal_cdf'           `nbincdf'              3.4.0
`pascal_inv'           `nbininv'              3.4.0
`pascal_pdf'           `nbinpdf'              3.4.0
`pascal_rnd'           `nbinrnd'              3.4.0
`poisson_cdf'          `poisscdf'             3.4.0
`poisson_inv'          `poissinv'             3.4.0
`poisson_pdf'          `poisspdf'             3.4.0
`poisson_rnd'          `poissrnd'             3.4.0
`polyinteg'            `polyint'              3.4.0
`struct_contains'      `isfield'              3.4.0
`struct_elements'      `fieldnames'           3.4.0
`t_cdf'                `tcdf'                 3.4.0
`t_inv'                `tinv'                 3.4.0
`t_pdf'                `tpdf'                 3.4.0
`t_rnd'                `trnd'                 3.4.0
`uniform_cdf'          `unifcdf'              3.4.0
`uniform_inv'          `unifinv'              3.4.0
`uniform_pdf'          `unifpdf'              3.4.0
`uniform_rnd'          `unifrnd'              3.4.0
`weibull_cdf'          `wblcdf'               3.4.0
`weibull_inv'          `wblinv'               3.4.0
`weibull_pdf'          `wblpdf'               3.4.0
`weibull_rnd'          `wblrnd'               3.4.0
`wiener_rnd'           `wienrnd'              3.4.0
`create_set'           `unique'               3.6.0
`dmult'                `diag (A) * B'         3.6.0
`iscommand'            None                   3.6.0
`israwcommand'         None                   3.6.0
`lchol'                `chol (..., "lower")'  3.6.0
`loadimage'            `load' or `imread'     3.6.0
`mark_as_command'      None                   3.6.0
`mark_as_rawcommand'   None                   3.6.0
`spatan2'              `atan2'                3.6.0
`spchol'               `chol'                 3.6.0
`spchol2inv'           `chol2inv'             3.6.0
`spcholinv'            `cholinv'              3.6.0
`spcumprod'            `cumprod'              3.6.0
`spcumsum'             `cumsum'               3.6.0
`spdet'                `det'                  3.6.0
`spdiag'               `sparse (diag (...))'  3.6.0
`spfind'               `find'                 3.6.0
`sphcat'               `horzcat'              3.6.0
`spinv'                `inv'                  3.6.0
`spkron'               `kron'                 3.6.0
`splchol'              `chol (..., "lower")'  3.6.0
`split'                `char (strsplit (s,    3.6.0
                       t))'                   
`splu'                 `lu'                   3.6.0
`spmax'                `max'                  3.6.0
`spmin'                `min'                  3.6.0
`spprod'               `prod'                 3.6.0
`spqr'                 `qr'                   3.6.0
`spsum'                `sum'                  3.6.0
`spsumsq'              `sumsq'                3.6.0
`spvcat'               `vertcat'              3.6.0
`str2mat'              `char'                 3.6.0
`unmark_command'       None                   3.6.0
`unmark_rawcommand'    None                   3.6.0


File: octave.info,  Node: Trouble,  Next: Installation,  Prev: Obsolete Functions,  Up: Top

Appendix F Known Causes of Trouble
**********************************

   This section describes known problems that affect users of Octave.
Most of these are not Octave bugs per se--if they were, we would fix
them.  But the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.

* Menu:

* Actual Bugs::                 Bugs we will fix later.
* Reporting Bugs::
* Service::


File: octave.info,  Node: Actual Bugs,  Next: Reporting Bugs,  Up: Trouble

F.1 Actual Bugs We Haven't Fixed Yet
====================================

   * Output that comes directly from Fortran functions is not sent
     through the pager and may appear out of sequence with other output
     that is sent through the pager.  One way to avoid this is to force
     pending output to be flushed before calling a function that will
     produce output from within Fortran functions.  To do this, use the
     command

          fflush (stdout)

     Another possible workaround is to use the command

          page_screen_output (false);

     to turn the pager off.

   A list of ideas for future enhancements is distributed with Octave.
See the file `PROJECTS' in the top level directory in the source
distribution.


File: octave.info,  Node: Reporting Bugs,  Next: Service,  Prev: Actual Bugs,  Up: Trouble

F.2 Reporting Bugs
==================

Your bug reports play an essential role in making Octave reliable.

   When you encounter a problem, the first thing to do is to see if it
is already known.  *Note Trouble::.  If it isn't known, then you should
report the problem.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  In any case, the principal function of a bug report is
to help the entire community by making the next version of Octave work
better.  Bug reports are your contribution to the maintenance of Octave.

   In order for a bug report to serve its purpose, you must include the
information that makes it possible to fix the bug.

* Menu:

* Bug Criteria::
* Bug Tracker::        Where to submit your bug report.
* Bug Reporting::      How to report a bug effectively.
* Sending Patches::    How to send a patch for Octave.


File: octave.info,  Node: Bug Criteria,  Next: Bug Tracker,  Up: Reporting Bugs

F.2.1 Have You Found a Bug?
---------------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   * If Octave gets a fatal signal, for any input whatever, that is a
     bug.  Reliable interpreters never crash.

   * If Octave produces incorrect results, for any input whatever, that
     is a bug.

   * Some output may appear to be incorrect when it is in fact due to a
     program whose behavior is undefined, which happened by chance to
     give the desired results on another system.  For example, the
     range operator may produce different results because of
     differences in the way floating point arithmetic is handled on
     various systems.

   * If Octave produces an error message for valid input, that is a bug.

   * If Octave does not produce an error message for invalid input,
     that is a bug.  However, you should note that your idea of
     "invalid input" might be my idea of "an extension" or "support for
     traditional practice".

   * If you are an experienced user of programs like Octave, your
     suggestions for improvement are welcome in any case.


File: octave.info,  Node: Bug Tracker,  Next: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

F.2.2 Where to Report Bugs
--------------------------

To report a bug in Octave, submit a bug report to the Octave bug tracker
`http://bugs.octave.org'.

   *Do not send bug reports to `help-octave'*.  Most users of Octave do
not want to receive bug reports.


File: octave.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Tracker,  Up: Reporting Bugs

F.2.3 How to Report Bugs
------------------------

Submit bug reports for Octave to the Octave bug tracker
`http://bugs.octave.org'.

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don't matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter.  Well, probably it doesn't, but one cannot be sure.
Perhaps the bug is a stray memory reference which happens to fetch from
the location where that name is stored in memory; perhaps, if the name
were different, the contents of that location would fool the
interpreter into doing the right thing despite the bug.  Play it safe
and give a specific, complete example.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  Always write your bug reports on the
assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug.  It is better to send a complete
bug report to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   To enable someone to investigate the bug, you should include all
these things:

   * The version of Octave.  You can get this by noting the version
     number that is printed when Octave starts, or running it with the
     `-v' option.

   * A complete input file that will reproduce the bug.

     A single statement may not be enough of an example--the bug might
     depend on other details that are missing from the single statement
     where the error finally occurs.

   * The command arguments you gave Octave to execute that example and
     observe the bug.  To guarantee you won't omit something important,
     list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   * The type of machine you are using, and the operating system name
     and version number.

   * The command-line arguments you gave to the `configure' command when
     you installed the interpreter.

   * A complete list of any modifications you have made to the
     interpreter source.

     Be precise about these changes--show a context diff for them.

   * Details of any other deviations from the standard procedure for
     installing Octave.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The interpreter gets a fatal signal,"
     or, "The output produced at line 208 is incorrect."

     Of course, if the bug is that the interpreter gets a fatal signal,
     then one can't miss it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the interpreter is out of sync, or you have
     encountered a bug in the C library on your system.  Your copy
     might crash and the copy here would not.  If you said to expect a
     crash, then when the interpreter here fails to crash, we would
     know that the bug was not happening.  If you don't say to expect a
     crash, then we would not know whether the bug was happening.  We
     would not be able to draw any conclusion from our observations.

     Often the observed symptom is incorrect output when your program
     is run.  Unfortunately, this is not enough information unless the
     program is short and simple.  It is very helpful if you can
     include an explanation of the expected output, and why the actual
     output is incorrect.

   * If you wish to suggest changes to the Octave source, send them as
     context diffs.  If you even discuss something in the Octave source,
     refer to it by context, not by line number, because the line
     numbers in the development sources probably won't match those in
     your sources.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and
     which changes will not affect it.  Such information is usually not
     necessary to enable us to fix bugs in Octave, but if you can find
     a simpler example to report _instead_ of the original one, that is
     a convenience.  Errors in the output will be easier to spot,
     running under the debugger will take less time, etc.  Most Octave
     bugs involve just one function, so the most straightforward way to
     simplify an example is to delete all the function definitions
     except the one in which the bug occurs.

     However, simplification is not vital; if you don't want to do
     this, report the bug anyway and send the entire test case you used.

   * A patch for the bug.  Patches can be helpful, but if you find a
     bug, you should report it, even if you cannot send a fix for the
     problem.


File: octave.info,  Node: Sending Patches,  Prev: Bug Reporting,  Up: Reporting Bugs

F.2.4 Sending Patches for Octave
--------------------------------

If you would like to write bug fixes or improvements for Octave, that is
very helpful.  When you send your changes, please follow these
guidelines to avoid causing extra work for us in studying the patches.

   If you don't follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining Octave is a lot
of work in the best of circumstances, and we can't keep up unless you do
your best to help.

   * Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

   * Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is
     right before installing it.  Even if it is right, we might have
     trouble judging it if we don't have a way to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons.  Send them
     _individually_.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.

   * Use `diff -c' to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them.
     Unified diff format is better than contextless diffs, but not as
     easy to read as `-c' format.

     If you have GNU diff, use `diff -cp', which shows the name of the
     function that each change occurs in.

   * Write the change log entries for your changes.

     Read the `ChangeLog' file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it's often helpful to indicate where within the
     function the change was made.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose.  Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does--but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.


File: octave.info,  Node: Service,  Prev: Reporting Bugs,  Up: Trouble

F.3 How To Get Help with Octave
===============================

The mailing list <help@octave.org> exists for the discussion of matters
related to using and installing Octave.  If would like to join the
discussion, please send a short note to <help-request@octave.org>.

   *Please do not* send requests to be added or removed from the
mailing list, or other administrative trivia to the list itself.

   If you think you have found a bug in Octave or in the installation
procedure, however, you should submit a complete bug report to the
Octave bug tracker at `http://bugs.octave.org'.  But before you submit
a bug report, please read `http://www.octave.org/bugs.html' to learn
how to submit a useful bug report.


File: octave.info,  Node: Installation,  Next: Emacs Octave Support,  Prev: Trouble,  Up: Top

Appendix G Installing Octave
****************************

   The procedure for installing Octave from source on a Unix-like
system is described below.  Building on other platforms will follow
similar steps.  Note that this description applies to Octave releases.
Building the development sources from the Mercurial archive requires
additional steps as described in *note Building the Development
Sources::.

* Menu:

* Build Dependencies::
* Running Configure and Make::
* Compiling Octave with 64-bit Indexing::
* Installation Problems::


File: octave.info,  Node: Build Dependencies,  Next: Running Configure and Make,  Up: Installation

G.1 Build Dependencies
======================

Octave is a fairly large program with many build dependencies.  You may
be able to find pre-packaged versions of the dependencies distributed as
part of your system, or you may have to build some or all of them
yourself.

* Menu:

* Obtaining the Dependencies Automatically::
* Build Tools::
* External Packages::


File: octave.info,  Node: Obtaining the Dependencies Automatically,  Next: Build Tools,  Up: Build Dependencies

G.1.1 Obtaining the Dependencies Automatically
----------------------------------------------

On some systems you can obtain many of Octave's build dependencies
automatically.  The commands for doing this vary by system.  Similarly,
the names of pre-compiled packages vary by system and do not always
match exactly the names listed in *note Build Tools:: and *note
External Packages::.

   You will usually need the development version of an external
dependency so that you get the libraries and header files for building
software, not just for running already compiled programs.  These
packages typically have names that end with the suffix `-dev' or
`-devel'.

   On systems with `apt-get' (Debian, Ubuntu, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     apt-get build-dep octave

The specific package name may be `octave3.2' or `octave3.4'.  The set
of required tools and external dependencies does not change frequently,
so it is not important that the version match exactly, but you should
use the most recent one available.

   On systems with `yum' (Fedora, Red Hat, etc.), you may be able to
install most of the tools and external packages using a command similar
to

     yum-builddep octave

The `yum-builddep' utility is part of the `yum-utils' package.

   For either type of system, the package name may include a version
number.  The set of required tools and external dependencies does not
change frequently, so it is not important that the version exactly match
the version you are installing, but you should use the most recent one
available.


File: octave.info,  Node: Build Tools,  Next: External Packages,  Prev: Obtaining the Dependencies Automatically,  Up: Build Dependencies

G.1.2 Build Tools
-----------------

The following tools are required:

C++, C, and Fortran compilers
     The Octave sources are primarily written in C++, but some portions
     are also written in C and Fortran.  The Octave sources are
     intended to be portable.  Recent versions of the GNU compiler
     collection (GCC) should work (`http://gcc.gnu.org').  If you use
     GCC, you should avoid mixing versions.  For example, be sure that
     you are not using the obsolete `g77' Fortran compiler with modern
     versions of `gcc' and `g++'.

GNU Make
     Tool for building software (`http://www.gnu.org/software/make').
     Octave's build system requires GNU Make.  Other versions of Make
     will not work.  Fortunately, GNU Make is highly portable and easy
     to install.

AWK, sed, and other Unix utilities
     Basic Unix system utilities are required for building Octave.  All
     will be available with any modern Unix system and also on Windows
     with either Cygwin or MinGW and MSYS.

   Additionally, the following tools may be needed:

Bison
     Parser generator (`http://www.gnu.org/software/bison').  You will
     need Bison if you modify the `oct-parse.yy' source file or if you
     delete the files that are generated from it.

Flex
     Lexer analyzer (`http://www.gnu.org/software/flex').  You will need
     Flex if you modify the `lex.ll' source file or if you delete the
     files that are generated from it.

Autoconf
     Package for software configuration
     (`http://www.gnu.org/software/autoconf').  Autoconf is required if
     you modify Octave's `configure.ac' file or other files that it
     requires.

Automake
     Package for Makefile generation
     (`http://www.gnu.org/software/automake').  Automake is required if
     you modify Octave's `Makefile.am' files or other files that they
     depend on.

Libtool
     Package for building software libraries
     (`http://www.gnu.org/software/libtool').  Libtool is required by
     Automake.


File: octave.info,  Node: External Packages,  Prev: Build Tools,  Up: Build Dependencies

G.1.3 External Packages
-----------------------

The following external packages are required:

BLAS
     Basic Linear Algebra Subroutine library
     (`http://www.netlib.org/blas').  Accelerated BLAS libraries such as
     ATLAS (`http://math-atlas.sourceforge.net') are recommeded for
     better performance.

LAPACK
     Linear Algebra Package (`http://www.netlib.org/lapack').

PCRE
     The Perl Compatible Regular Expression library
     (`http://www.pcre.org').

   The following external package is optional but strongly recommended:

GNU Readline
     Command-line editing library (`www.gnu.org/s/readline').

   If you wish to build Octave without GNU readline installed, you must
use the `--disable-readline' option when running the configure script.

   The following external software packages are optional but
recommended:

ARPACK
     Library for the solution of large-scale eigenvalue problems
     (`http://forge.scilab.org/index.php/p/arpack-ng').  ARPACK is
     required to provide the functions `eigs' and `svds'.

cURL
     Library for transferring data with URL syntax
     (`http://curl.haxx.se').  cURL is required to provide the
     `urlread' and `urlwrite' functions and the `ftp' class.

FFTW3
     Library for computing discrete Fourier transforms
     (`http://www.fftw.org').  FFTW3 is used to provide better
     performance for functions that compute discrete Fourier transforms
     (`fft', `ifft', `fft2', etc.)

FLTK
     Portable GUI toolkit (`http://www.fltk.org').  FLTK is currently
     used to provide windows for Octave's OpenGL-based graphics
     functions.

fontconfig
     Library for configuring and customizing font access
     (`http://www.freedesktop.org/wiki/Software/fontconfig').
     Fontconfig is used to manage fonts for Octave's OpenGL-based
     graphics functions.

FreeType
     Portable font engine (`http://www.freetype.org').  FreeType is used
     to perform font rendering for Octave's OpenGL-based graphics
     functions.

GLPK
     GNU Linear Programming Kit (`http://www.gnu.org/software/glpk').
     GPLK is required for the function `glpk'.

gnuplot
     Interactive graphics program (`http://www.gnuplot.info').  gnuplot
     is currently the default graphics renderer for Octave.

GraphicsMagick++
     Image processing library (`http://www.graphicsmagick.org').
     GraphicsMagick++ is used to provide the `imread' and `imwrite'
     functions.

HDF5
     Library for manipulating portable data files
     (`http://www.hdfgroup.org/HDF5').  HDF5 is required for Octave's
     `load' and `save' commands to read and write HDF data files.

LLVM
     Compiler framework, (`http://www.llvm.org').  LLVM is required for
     Octave's experimental just-in-time (JIT) compilation for speeding
     up the interpreter.

OpenGL
     API for portable 2-D and 3-D graphics (`http://www.opengl.org').
     An OpenGL implementation is required to provide Octave's
     OpenGL-based graphics functions.  Octave's OpenGL-based graphics
     functions usually outperform the gnuplot-based graphics functions
     because plot data can be rendered directly instead of sending data
     and commands to gnuplot for interpretation and rendering.

Qhull
     Computational geometry library (`http://www.qhull.org').  Qhull is
     required to provide the functions `convhull', `convhulln',
     `delaunay', `delaunay3', `delaunayn', `voronoi', and `voronoin'.

QRUPDATE
     QR factorization updating library
     (`http://sourceforge.net/projects/qrupdate').  QRUPDATE is used to
     provide improved performance for the functions `qrdelete',
     `qrinsert', `qrshift', and `qrupdate'.

QScintilla
     Source code highlighter and manipulator; a Qt port of Scintilla
     (`http://www.riverbankcomputing.co.uk/software/qscintilla').
     QScintilla is used for syntax highlighting and code completion in
     the GUI.

Qt
     GUI and utility libraries (`').  Qt is required for building the
     GUI.  It is a large framework, but the only components required
     are the GUI, core, WebKit, and network modules.

SuiteSparse
     Sparse matrix factorization library
     (`http://www.cise.ufl.edu/research/sparse/SuiteSparse').
     SuiteSparse is required to provide sparse matrix factorizations and
     solution of linear equations for sparse systems.

zlib
     Data compression library (`http://zlib.net').  The zlib library is
     required for Octave's `load' and `save' commands to handle
     compressed data, including MATLAB v5 MAT files.


File: octave.info,  Node: Running Configure and Make,  Next: Compiling Octave with 64-bit Indexing,  Prev: Build Dependencies,  Up: Installation

G.2 Running Configure and Make
==============================

   * Run the shell script `configure'.  This will determine the features
     your system has (or doesn't have) and create a file named
     `Makefile' from each of the files named `Makefile.in'.

     Here is a summary of the configure options that are most
     frequently used when building Octave:

    `--help'
          Print a summary of the options recognized by the configure
          script.

    `--prefix=PREFIX'
          Install Octave in subdirectories below PREFIX.  The default
          value of PREFIX is `/usr/local'.

    `--srcdir=DIR'
          Look for Octave sources in the directory DIR.

    `--enable-64'
          This is an *experimental* option to enable Octave to use
          64-bit integers for array dimensions and indexing on 64-bit
          platforms.  You probably don't want to use this option unless
          you know what you are doing.  *Note Compiling Octave with
          64-bit Indexing::, for more details about building Octave
          with this option.

    `--enable-bounds-check'
          Enable bounds checking for indexing operators in the internal
          array classes.  This option is primarily used for debugging
          Octave.  Building Octave with this option has a negative
          impact on performance and is not recommended for general use.

    `--disable-docs'
          Disable building all forms of the documentation (Info, PDF,
          HTML).  The default is to build documentation, but your
          system will need functioning Texinfo and TeX installs for
          this to succeed.

    `--enable-float-truncate'
          This option allows for truncation of intermediate floating
          point results in calculations.  It is only necessary for
          certain platforms.

    `--enable-readline'
          Use the readline library to provide for editing of the
          command line in terminal environments.  This option is on by
          default.

    `--enable-shared'
          Create shared libraries (this is the default).  If you are
          planning to use the dynamic loading features, you will
          probably want to use this option.  It will make your `.oct'
          files much smaller and on some systems it may be necessary to
          build shared libraries in order to use dynamically linked
          functions.

          You may also want to build a shared version of `libstdc++',
          if your system doesn't already have one.

    `--enable-dl'
          Use `dlopen' and friends to make Octave capable of dynamically
          linking externally compiled functions (this is the default if
          `--enable-shared' is specified).  This option only works on
          systems that actually have these functions.  If you plan on
          using this feature, you should probably also use
          `--enable-shared' to reduce the size of your `.oct' files.

    `--with-blas=<lib>'
          By default, configure looks for the best BLAS matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned
          libraries.  (The use of an optimized BLAS will generally
          result in several-times faster matrix operations.)  Use this
          option to specify a particular BLAS library that Octave
          should use.

    `--with-lapack=<lib>'
          By default, configure looks for the best LAPACK matrix
          libraries on your system, including optimized implementations
          such as the free ATLAS 3.0, as well as vendor-tuned
          libraries.  (The use of an optimized LAPACK will generally
          result in several-times faster matrix operations.)  Use this
          option to specify a particular LAPACK library that Octave
          should use.

    `--with-magick=<lib>'
          Select the library to use for image I/O.  The two possible
          values are "GraphicsMagick" (default) or "ImageMagick".

    `--with-sepchar=<char>'
          Use <char> as the path separation character.  This option can
          help when running Octave on non-Unix systems.

    `--without-amd'
          Don't use AMD, disable some sparse matrix functionality.

    `--without-camd'
          Don't use CAMD, disable some sparse matrix functionality.

    `--without-colamd'
          Don't use COLAMD, disable some sparse matrix functionality.

    `--without-ccolamd'
          Don't use CCOLAMD, disable some sparse matrix functionality.

    `--without-cholmod'
          Don't use CHOLMOD, disable some sparse matrix functionality.

    `--without-curl'
          Don't use the cURL library, disable the ftp objects,
          `urlread' and `urlwrite' functions.

    `--without-cxsparse'
          Don't use CXSPARSE, disable some sparse matrix functionality.

    `--without-fftw3'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library.

    `--without-fftw3f'
          Use the included FFTPACK library for computing Fast Fourier
          Transforms instead of the FFTW3 library when operating on
          single precision (float) values.

    `--without-glpk'
          Don't use the GLPK library for linear programming.

    `--without-hdf5'
          Don't use the HDF5 library, disable reading and writing of
          HDF5 files.

    `--without-opengl'
          Don't use OpenGL, disable native graphics toolkit for
          plotting.  You will need `gnuplot' installed in order to make
          plots.

    `--without-qhull'
          Don't use Qhull, disable `delaunay', `convhull', and related
          functions.

    `--without-qrupdate'
          Don't use QRUPDATE, disable QR and Cholesky update functions.

    `--without-umfpack'
          Don't use UMFPACK, disable some sparse matrix functionality.

    `--without-zlib'
          Don't use the zlib library, disable data file compression and
          support for recent MAT file formats.

    `--without-framework-carbon'
          Don't use framework Carbon headers, libraries, or specific
          source code even if the configure test succeeds (the default
          is to use Carbon framework if available).  This is a platform
          specific configure option for Mac systems.

    `--without-framework-opengl'
          Don't use framework OpenGL headers, libraries, or specific
          source code even if the configure test succeeds.  If this
          option is given then OpenGL headers and libraries in standard
          system locations are tested (the default value is
          `--with-framework-opengl').  This is a platform specific
          configure option for Mac systems.


     See the file `INSTALL' for more general information about the
     command line options used by configure.  That file also contains
     instructions for compiling in a directory other than the one where
     the source is located.

   * Run make.

     You will need a recent version of GNU Make as Octave relies on
     certain features not generally available in all versions of make.
     Modifying Octave's makefiles to work with other make programs is
     probably not worth your time; instead, we simply recommend
     installing GNU Make.

     There are currently two options for plotting in Octave: (1) the
     external program gnuplot, or (2) the internal graphics engine
     using OpenGL and FLTK.  Gnuplot is a command-driven interactive
     function plotting program.  Gnuplot is copyrighted, but freely
     distributable.  As of Octave release 3.4, gnuplot is the default
     option for plotting.  But, the internal graphics engine is nearly
     100% compatible, certainly for most ordinary plots, and users are
     encouraged to test it.  It is anticipated that the internal engine
     will become the default option at the next major release of Octave.

     To compile Octave, you will need a recent version of `g++' or other
     ANSI C++ compiler.  In addition, you will need a Fortran 77
     compiler or `f2c'.  If you use `f2c', you will need a script like
     `fort77' that works like a normal Fortran compiler by combining
     `f2c' with your C compiler in a single script.

     If you plan to modify the parser you will also need GNU `bison' and
     `flex'.  If you modify the documentation, you will need GNU
     Texinfo.

     GNU Make, `gcc' (and `libstdc++'), `gnuplot', `bison', `flex', and
     Texinfo are all available from many anonymous ftp archives.  The
     primary site is `ftp.gnu.org', but it is often very busy.  A list
     of sites that mirror the software on `ftp.gnu.org' is available by
     anonymous ftp from `ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP'.

     Octave requires approximately 1.4 GB of disk storage to unpack and
     compile from source (significantly less, 400 MB, if you don't
     compile with debugging symbols).  To compile without debugging
     symbols try the command

          make CFLAGS=-O CXXFLAGS=-O LDFLAGS=

     instead of just `make'.

   * If you encounter errors while compiling Octave, first check the
     list of known problems below to see if there is a workaround or
     solution for your problem.  If not, *note Trouble::, for
     information about how to report bugs.

   * Once you have successfully compiled Octave, run `make install'.

     This will install a copy of Octave, its libraries, and its
     documentation in the destination directory.  As distributed,
     Octave is installed in the following directories.  In the table
     below, PREFIX defaults to `/usr/local', VERSION stands for the
     current version number of the interpreter, and ARCH is the type of
     computer on which Octave is installed (for example,
     `i586-unknown-gnu').

    `PREFIX/bin'
          Octave and other binaries that people will want to run
          directly.

    `PREFIX/lib/octave-VERSION'
          Libraries like liboctave.a and liboctinterp.a.

    `PREFIX/octave-VERSION/include/octave'
          Include files distributed with Octave.

    `PREFIX/share'
          Architecture-independent data files.

    `PREFIX/share/man/man1'
          Unix-style man pages describing Octave.

    `PREFIX/share/info'
          Info files describing Octave.

    `PREFIX/share/octave/VERSION/m'
          Function files distributed with Octave.  This includes the
          Octave version, so that multiple versions of Octave may be
          installed at the same time.

    `PREFIX/libexec/octave/VERSION/exec/ARCH'
          Executables to be run by Octave rather than the user.

    `PREFIX/lib/octave/VERSION/oct/ARCH'
          Object files that will be dynamically loaded.

    `PREFIX/share/octave/VERSION/imagelib'
          Image files that are distributed with Octave.


File: octave.info,  Node: Compiling Octave with 64-bit Indexing,  Next: Installation Problems,  Prev: Running Configure and Make,  Up: Installation

G.3 Compiling Octave with 64-bit Indexing
=========================================

Note: the following only applies to systems that have 64-bit pointers.
Configuring Octave with `--enable-64' cannot magically make a 32-bit
system have a 64-bit address space.

   On 64-bit systems, Octave is limited to (approximately) the following
array sizes when using the default 32-bit indexing mode:

     double:         16GB
     single:          8GB
     uint64, int64:  16GB
     uint32, int32:   8GB
     uint16, int16:   4GB
     uint8, int8:     2GB

   In each case, the limit is really (approximately) 2^31 elements
because of the default type of the value used for indexing arrays
(signed 32-bit integer, corresponding to the size of a Fortran INTEGER
value).

   Trying to create larger arrays will produce the following error:

     octave:1> a = zeros (1024*1024*1024*3, 1, 'int8');
     error: memory exhausted or requested size too large
            for range of Octave's index type --
            trying to return to prompt

You will obtain this error even if your system has enough memory to
create this array (4 GB in the above case).

   To use arrays larger than 2 GB, Octave has to be configured with the
option `--enable-64'.  This option is experimental and you are
encouraged to submit bug reports if you find a problem.  With this
option, Octave will use 64-bit integers internally for array dimensions
and indexing.  However, all numerical libraries used by Octave will
*also* need to use 64-bit integers for array dimensions and indexing.
In most cases, this means they will need to be compiled from source
since most (all?) distributions which package these libraries compile
them with the default Fortran integer size, which is normally 32-bits
wide.

   The following instructions were tested with the development version
of Octave and GCC 4.3.4 on an x86_64 Debian system.

   The versions listed below are the versions used for testing.  If
newer versions of these packages are available, you should try to use
them, although there may be some differences.

   All libraries and header files will be installed in subdirectories of
`$prefix64' (you must choose the location of this directory).

   * BLAS and LAPACK (`http://www.netlib.org/lapack')

     Reference versions for both libraries are included in the reference
     LAPACK 3.2.1 distribution from `netlib.org'.

        - Copy the file `make.inc.example' and name it `make.inc'.  The
          options `-fdefault-integer-8' and `-fPIC' (on 64-bit CPU)
          have to be added to the variable `OPTS' and `NOOPT'.

        - Once you have compiled this library make sure that you use it
          for compiling Suite Sparse and Octave.  In the following we
          assume that you installed the LAPACK library as
          $prefix64/lib/liblapack.a.

   * QRUPDATE (`http://sourceforge.net/projects/qrupdate')

     In the `Makeconf' file:

        - Add `-fdefault-integer-8' to `FFLAGS'.

        - Adjust the BLAS and LAPACK variables as needed if your 64-bit
          aware BLAS and LAPACK libraries are in a non-standard
          location.

        - Set `PREFIX' to the top-level directory of your install tree.

        - Run `make solib' to make a shared library.

        - Run `make install' to install the library.

   * SuiteSparse (`http://www.cise.ufl.edu/research/sparse/SuiteSparse')

        - In `UFconfig/UFconfig.mk' use the following options for
          `CFLAGS' and `F77FLAGS':

               CC = gcc
               CFLAGS = -fPIC -O -DLP64 -DLONGBLAS='long int' -DLONG='long int'
               F77 = gfortran
               F77FLAGS = -fPIC -O -fdefault-integer-8
               BLAS = -L$BLAS/lib -lblas -lgfortran"
               LAPACK = -L$LAPACK/lib -llapack"

        - Disable the GPL-incompatible `METIS' library:

               CHOLMOD_CONFIG = -DNPARTITION
               SPQR_CONFIG = -DNPARTITION
               METIS_PATH =
               METIS =

        - Disable the `DI' versions of the `CHOLMOD' library files by
          setting

               OBJ = $(DL)

          in `CHOLMOD/Lib/Makefile'.

        - Disable the `DI' versions of the `CHOLMOD' tests by commenting
          out or deleting the following lines in
          `CHOLMOD/Demo/Makefile':

               ./cholmod_demo < Matrix/bcsstk01.tri
               ./cholmod_demo < Matrix/lp_afiro.tri
               ./cholmod_demo < Matrix/can___24.mtx
               ./cholmod_demo < Matrix/c.tri
               ./cholmod_simple < Matrix/c.tri
               ./cholmod_simple < Matrix/can___24.mtx
               ./cholmod_simple < Matrix/bcsstk01.tri

        - Run `make' to build the libraries.

        - The SuiteSparse `Makefile' does not have an install target so
          you must install the files by hand:

               mkdir $prefix64/include/suitesparse
               cp UFconfig/UFconfig.h $prefix64/include/suitesparse
               for d in AMD BTF CAMD CCOLAMD \
                        CHOLMOD COLAMD CXSparse UMFPACK; do
                 cp $d/Lib/lib*a $prefix64/lib
                 cp $d/Include/*h $prefix64/include/suitesparse
               done

        - You can generate shared versions of these libraries by doing
          the following in the `$prefix64/lib' directory:

               top=$(pwd)
               for f in *.a; do
                 mkdir tmp
                 cd tmp
                 ar vx ../$f
                 gcc -shared -o ../${f%%.a}.so *.o
                 cd $top
                 rm -rf tmp
               done


   * ATLAS instead of reference BLAS and LAPACK

     Suggestions on how to compile ATLAS would be most welcome.

   * GLPK

     Suggestions on how to compile GLPK would be most welcome.

   * Qhull (`http://www.qhull.org')

     Suggestions on how to compile Qhull would be most welcome.

   * Octave

     Octave's 64-bit index support is activated with the configure
     option `--enable-64'.

          ./configure \
            LD_LIBRARY_PATH="$prefix64/lib" \
            CPPFLAGS="-I$prefix64/include" LDFLAGS="-L$prefix64/lib" \
            --enable-64

     You must ensure that all Fortran sources except those in the
     `liboctave/cruft/ranlib' directory are compiled such that INTEGERS
     are 8-bytes wide.  If you are using gfortran, the configure script
     should automatically set the Makefile variable
     `F77_INTEGER_8_FLAG' to `-fdefault-integer-8'.  If you are using
     another compiler, you must set this variable yourself.  You should
     NOT set this flag in `FFLAGS', otherwise the files in
     `liboctave/cruft/ranlib' will be miscompiled.

   * Other dependencies

     Probably nothing special needs to be done for the following
     dependencies.  If you discover that something does need to be done,
     please submit a bug report.

        - pcre

        - zlib

        - hdf5

        - fftw3

        - cURL

        - GraphicsMagick++

        - OpenGL

        - freetype

        - fontconfig

        - fltk



File: octave.info,  Node: Installation Problems,  Prev: Compiling Octave with 64-bit Indexing,  Up: Installation

G.4 Installation Problems
=========================

This section contains a list of problems (and some apparent problems
that don't really mean anything is wrong) that may show up during
installation of Octave.

   * On some SCO systems, `info' fails to compile if `HAVE_TERMIOS_H'
     is defined in `config.h'.  Simply removing the definition from
     `info/config.h' should allow it to compile.

   * If `configure' finds `dlopen', `dlsym', `dlclose', and `dlerror',
     but not the header file `dlfcn.h', you need to find the source for
     the header file and install it in the directory `usr/include'.
     This is reportedly a problem with Slackware 3.1.  For Linux/GNU
     systems, the source for `dlfcn.h' is in the `ldso' package.

   * Building `.oct' files doesn't work.

     You should probably have a shared version of `libstdc++'.  A patch
     is needed to build shared versions of version 2.7.2 of `libstdc++'
     on the HP-PA architecture.  You can find the patch at
     `ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix'.

   * On some DEC alpha systems there may be a problem with the `libdxml'
     library, resulting in floating point errors and/or segmentation
     faults in the linear algebra routines called by Octave.  If you
     encounter such problems, then you should modify the configure
     script so that `SPECIAL_MATH_LIB' is not set to `-ldxml'.

   * On FreeBSD systems Octave may hang while initializing some internal
     constants.  The fix appears to be to use

          options      GPL_MATH_EMULATE

     rather than

          options      MATH_EMULATE

     in the kernel configuration files (typically found in the directory
     `/sys/i386/conf'.  After making this change, you'll need to rebuild
     the kernel, install it, and reboot.

   * If you encounter errors like

          passing `void (*)()' as argument 2 of
            `octave_set_signal_handler(int, void (*)(int))'

     or

          warning: ANSI C++ prohibits conversion from `(int)'
                   to `(...)'

     while compiling `sighandlers.cc', you may need to edit some files
     in the `gcc' include subdirectory to add proper prototypes for
     functions there.  For example, Ultrix 4.2 needs proper
     declarations for the `signal' function and the `SIG_IGN' macro in
     the file `signal.h'.

     On some systems the `SIG_IGN' macro is defined to be something
     like this:

          #define  SIG_IGN  (void (*)())1

     when it should really be something like:

          #define  SIG_IGN  (void (*)(int))1

     to match the prototype declaration for the `signal' function.  This
     change should also be made for the `SIG_DFL' and `SIG_ERR'
     symbols.  It may be necessary to change the definitions in
     `sys/signal.h' as well.

     The `gcc' `fixincludes' and `fixproto' scripts should probably fix
     these problems when `gcc' installs its modified set of header
     files, but I don't think that's been done yet.

     *You should not change the files in `/usr/include'*.  You can find
     the `gcc' include directory tree by running the command

          gcc -print-libgcc-file-name

     The directory of `gcc' include files normally begins in the same
     directory that contains the file `libgcc.a'.

   * Some of the Fortran subroutines may fail to compile with older
     versions of the Sun Fortran compiler.  If you get errors like

          zgemm.f:
                  zgemm:
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 245: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 304: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 327: warning: unexpected parent of complex
            expression subtree
          pcc_binval: missing IR_CONV in complex op
          make[2]: *** [zgemm.o] Error 1

     when compiling the Fortran subroutines in the `liboctave/cruft'
     subdirectory, you should either upgrade your compiler or try
     compiling with optimization turned off.

   * On NeXT systems, if you get errors like this:

          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBB7656
          /usr/tmp/cc007458.s:unknown:Undefined local
                symbol LBE7656

     when compiling `Array.cc' and `Matrix.cc', try recompiling these
     files without `-g'.

   * Some people have reported that calls to system() and the pager do
     not work on SunOS systems.  This is apparently due to having
     `G_HAVE_SYS_WAIT' defined to be 0 instead of 1 when compiling
     `libg++'.

   * On NeXT systems, linking to `libsys_s.a' may fail to resolve the
     following functions

          _tcgetattr
          _tcsetattr
          _tcflow

     which are part of `libposix.a'.  Unfortunately, linking Octave with
     `-posix' results in the following undefined symbols.

          .destructors_used
          .constructors_used
          _objc_msgSend
          _NXGetDefaultValue
          _NXRegisterDefaults
          .objc_class_name_NXStringTable
          .objc_class_name_NXBundle

     One kluge around this problem is to extract `termios.o' from
     `libposix.a', put it in Octave's `src' directory, and add it to
     the list of files to link together in the makefile.  Suggestions
     for better ways to solve this problem are welcome!

   * If Octave crashes immediately with a floating point exception, it
     is likely that it is failing to initialize the IEEE floating point
     values for infinity and NaN.

     If your system actually does support IEEE arithmetic, you should
     be able to fix this problem by modifying the function
     `octave_ieee_init' in the file `lo-ieee.cc' to correctly
     initialize Octave's internal infinity and NaN variables.

     If your system does not support IEEE arithmetic but Octave's
     configure script incorrectly determined that it does, you can work
     around the problem by editing the file `config.h' to not define
     `HAVE_ISINF', `HAVE_FINITE', and `HAVE_ISNAN'.

     In any case, please report this as a bug since it might be
     possible to modify Octave's configuration script to automatically
     determine the proper thing to do.

   * If Octave is unable to find a header file because it is installed
     in a location that is not normally searched by the compiler, you
     can add the directory to the include search path by specifying
     (for example) `CPPFLAGS=-I/some/nonstandard/directory' as an
     argument to `configure'.  Other variables that can be specified
     this way are `CFLAGS', `CXXFLAGS', `FFLAGS', and `LDFLAGS'.
     Passing them as options to the configure script also records them
     in the `config.status' file.  By default, `CPPFLAGS' and `LDFLAGS'
     are empty, `CFLAGS' and `CXXFLAGS' are set to "-g -O" and `FFLAGS'
     is set to "-O".



File: octave.info,  Node: Emacs Octave Support,  Next: Grammar and Parser,  Prev: Installation,  Up: Top

Appendix H Emacs Octave Support
*******************************

The development of Octave code can greatly be facilitated using Emacs
with Octave mode, a major mode for editing Octave files which can e.g.
automatically indent the code, do some of the typing (with Abbrev mode)
and show keywords, comments, strings, etc. in different faces (with
Font-lock mode on devices that support it).

   It is also possible to run Octave from within Emacs, either by
directly entering commands at the prompt in a buffer in Inferior Octave
mode, or by interacting with Octave from within a file with Octave
code.  This is useful in particular for debugging Octave code.

   Finally, you can convince Octave to use the Emacs info reader for
`help -i'.

   All functionality is provided by the Emacs Lisp package EOS (for
"Emacs Octave Support").  This chapter describes how to set up and use
this package.

   Please contact <Kurt.Hornik@wu-wien.ac.at> if you have any questions
or suggestions on using EOS.

* Menu:

* Installing EOS::
* Using Octave Mode::
* Running Octave from Within Emacs::
* Using the Emacs Info Reader for Octave::


File: octave.info,  Node: Installing EOS,  Next: Using Octave Mode,  Up: Emacs Octave Support

H.1 Installing EOS
==================

The Emacs package EOS consists of the three files `octave-mod.el',
`octave-inf.el', and `octave-hlp.el'.  These files, or better yet their
byte-compiled versions, should be somewhere in your Emacs load-path.

   If you have GNU Emacs with a version number at least as high as
19.35, you are all set up, because EOS is respectively will be part of
GNU Emacs as of version 19.35.

   Otherwise, copy the three files from the `emacs' subdirectory of the
Octave distribution to a place where Emacs can find them (this depends
on how your Emacs was installed).  Byte-compile them for speed if you
want.


File: octave.info,  Node: Using Octave Mode,  Next: Running Octave from Within Emacs,  Prev: Installing EOS,  Up: Emacs Octave Support

H.2 Using Octave Mode
=====================

If you are lucky, your sysadmins have already arranged everything so
that Emacs automatically goes into Octave mode whenever you visit an
Octave code file as characterized by its extension `.m'.  If not,
proceed as follows.

  1. To begin using Octave mode for all `.m' files you visit, add the
     following lines to a file loaded by Emacs at startup time,
     typically your `~/.emacs' file:

          (autoload 'octave-mode "octave-mod" nil t)
          (setq auto-mode-alist
                (cons '("\\.m$" . octave-mode) auto-mode-alist))

  2. Finally, to turn on the abbrevs, auto-fill and font-lock features
     automatically, also add the following lines to one of the Emacs
     startup files:
          (add-hook 'octave-mode-hook
                    (lambda ()
                      (abbrev-mode 1)
                      (auto-fill-mode 1)
                      (if (eq window-system 'x)
                          (font-lock-mode 1))))
     See the Emacs manual for more information about how to customize
     Font-lock mode.

   In Octave mode, the following special Emacs commands can be used in
addition to the standard Emacs commands.

`C-h m'
     Describe the features of Octave mode.

`LFD'
     Reindent the current Octave line, insert a newline and indent the
     new line (`octave-reindent-then-newline-and-indent').  An abbrev
     before point is expanded if `abbrev-mode' is non-`nil'.

`TAB'
     Indents current Octave line based on its contents and on previous
     lines (`indent-according-to-mode').

`;'
     Insert an "electric" semicolon (`octave-electric-semi').  If
     `octave-auto-indent' is non-`nil', reindent the current line.  If
     `octave-auto-newline' is non-`nil', automagically insert a newline
     and indent the new line.

``'
     Start entering an abbreviation (`octave-abbrev-start').  If Abbrev
     mode is turned on, typing ``C-h' or ``?' lists all abbrevs.  Any
     other key combination is executed normally.  Note that all Octave
     abbrevs start with a grave accent.

`M-LFD'
     Break line at point and insert continuation marker and alignment
     (`octave-split-line').

`M-TAB'
     Perform completion on Octave symbol preceding point, comparing that
     symbol against Octave's reserved words and built-in variables
     (`octave-complete-symbol').

`M-C-a'
     Move backward to the beginning of a function
     (`octave-beginning-of-defun').  With prefix argument N, do it that
     many times if N is positive; otherwise, move forward to the N-th
     following beginning of a function.

`M-C-e'
     Move forward to the end of a function (`octave-end-of-defun').
     With prefix argument N, do it that many times if N is positive;
     otherwise, move back to the N-th preceding end of a function.

`M-C-h'
     Puts point at beginning and mark at the end of the current Octave
     function, i.e., the one containing point or following point
     (`octave-mark-defun').

`M-C-q'
     Properly indents the Octave function which contains point
     (`octave-indent-defun').

`M-;'
     If there is no comment already on this line, create a code-level
     comment (started by two comment characters) if the line is empty,
     or an in-line comment (started by one comment character) otherwise
     (`octave-indent-for-comment').  Point is left after the start of
     the comment which is properly aligned.

`C-c ;'
     Puts the comment character `#' (more precisely, the string value of
     `octave-comment-start') at the beginning of every line in the
     region (`octave-comment-region').  With just `C-u' prefix
     argument, uncomment each line in the region.  A numeric prefix
     argument N means use N comment characters.

`C-c :'
     Uncomments every line in the region (`octave-uncomment-region').

`C-c C-p'
     Move one line of Octave code backward, skipping empty and comment
     lines (`octave-previous-code-line').  With numeric prefix argument
     N, move that many code lines backward (forward if N is negative).

`C-c C-n'
     Move one line of Octave code forward, skipping empty and comment
     lines (`octave-next-code-line').  With numeric prefix argument N,
     move that many code lines forward (backward if N is negative).

`C-c C-a'
     Move to the `real' beginning of the current line
     (`octave-beginning-of-line').  If point is in an empty or comment
     line, simply go to its beginning; otherwise, move backwards to the
     beginning of the first code line which is not inside a continuation
     statement, i.e., which does not follow a code line ending in `...'
     or `\', or is inside an open parenthesis list.

`C-c C-e'
     Move to the `real' end of the current line (`octave-end-of-line').
     If point is in a code line, move forward to the end of the first
     Octave code line which does not end in `...' or `\' or is inside an
     open parenthesis list.  Otherwise, simply go to the end of the
     current line.

`C-c M-C-n'
     Move forward across one balanced begin-end block of Octave code
     (`octave-forward-block').  With numeric prefix argument N, move
     forward across N such blocks (backward if N is negative).

`C-c M-C-p'
     Move back across one balanced begin-end block of Octave code
     (`octave-backward-block').  With numeric prefix argument N, move
     backward across N such blocks (forward if N is negative).

`C-c M-C-d'
     Move forward down one begin-end block level of Octave code
     (`octave-down-block').  With numeric prefix argument, do it that
     many times; a negative argument means move backward, but still go
     down one level.

`C-c M-C-u'
     Move backward out of one begin-end block level of Octave code
     (`octave-backward-up-block').  With numeric prefix argument, do it
     that many times; a negative argument means move forward, but still
     to a less deep spot.

`C-c M-C-h'
     Put point at the beginning of this block, mark at the end
     (`octave-mark-block').  The block marked is the one that contains
     point or follows point.

`C-c ]'
     Close the current block on a separate line (`octave-close-block').
     An error is signaled if no block to close is found.

`C-c f'
     Insert a function skeleton, prompting for the function's name,
     arguments and return values which have to be entered without
     parentheses (`octave-insert-defun').

`C-c C-h'
     Search the function, operator and variable indices of all info
     files with documentation for Octave for entries (`octave-help').
     If used interactively, the entry is prompted for with completion.
     If multiple matches are found, one can cycle through them using
     the standard `,' (`Info-index-next') command of the Info reader.

     The variable `octave-help-files' is a list of files to search
     through and defaults to '("octave").  If there is also an Octave
     Local Guide with corresponding info file, say, `octave-LG', you can
     have `octave-help' search both files by
          (setq octave-help-files '("octave" "octave-LG"))
     in one of your Emacs startup files.


   A common problem is that the <RET> key does _not_ indent the line to
where the new text should go after inserting the newline.  This is
because the standard Emacs convention is that <RET> (aka `C-m') just
adds a newline, whereas <LFD> (aka `C-j') adds a newline and indents
it.  This is particularly inconvenient for users with keyboards which
do not have a special <LFD> key at all; in such cases, it is typically
more convenient to use <RET> as the <LFD> key (rather than typing
`C-j').

   You can make <RET> do this by adding
     (define-key octave-mode-map "\C-m"
       'octave-reindent-then-newline-and-indent)
   to one of your Emacs startup files.  Another, more generally
applicable solution is
     (defun RET-behaves-as-LFD ()
       (let ((x (key-binding "\C-j")))
         (local-set-key "\C-m" x)))
     (add-hook 'octave-mode-hook 'RET-behaves-as-LFD)
   (this works for all modes by adding to the startup hooks, without
having to know the particular binding of <RET> in that mode!).  Similar
considerations apply for using <M-RET> as <M-LFD>.  As Barry A. Warsaw
<bwarsaw@cnri.reston.va.us> says in the documentation for his
`cc-mode', "This is a very common question.  `:-)' If you want this to
be the default behavior, don't lobby me, lobby RMS!"

   The following variables can be used to customize Octave mode.

`octave-auto-indent'
     Non-`nil' means auto-indent the current line after a semicolon or
     space.  Default is `nil'.

`octave-auto-newline'
     Non-`nil' means auto-insert a newline and indent after semicolons
     are typed.  The default value is `nil'.

`octave-blink-matching-block'
     Non-`nil' means show matching begin of block when inserting a
     space, newline or `;' after an else or end keyword.  Default is
     `t'.  This is an extremely useful feature for automatically
     verifying that the keywords match--if they don't, an error message
     is displayed.

`octave-block-offset'
     Extra indentation applied to statements in block structures.
     Default is 2.

`octave-continuation-offset'
     Extra indentation applied to Octave continuation lines.  Default
     is 4.

`octave-continuation-string'
     String used for Octave continuation lines.  Normally `\'.

`octave-mode-startup-message'
     If `t' (default), a startup message is displayed when Octave mode
     is called.


   If Font Lock mode is enabled, Octave mode will display

   * strings in `font-lock-string-face'

   * comments in `font-lock-comment-face'

   * the Octave reserved words (such as all block keywords) and the text
     functions (such as `cd' or `who') which are also reserved using
     `font-lock-keyword-face'

   * the built-in operators (`&&', `==', ...) using
     `font-lock-reference-face'

   * and the function names in function declarations in
     `font-lock-function-name-face'.

   There is also rudimentary support for Imenu (currently, function
names can be indexed).

   You can generate TAGS files for Emacs from Octave `.m' files using
the shell script `octave-tags' that is installed alongside your copy of
Octave.

   Customization of Octave mode can be performed by modification of the
variable `octave-mode-hook'.  If the value of this variable is
non-`nil', turning on Octave mode calls its value.

   If you discover a problem with Octave mode, you can conveniently
send a bug report using `C-c C-b' (`octave-submit-bug-report').  This
automatically sets up a mail buffer with version information already
added.  You just need to add a description of the problem, including a
reproducible test case and send the message.


File: octave.info,  Node: Running Octave from Within Emacs,  Next: Using the Emacs Info Reader for Octave,  Prev: Using Octave Mode,  Up: Emacs Octave Support

H.3 Running Octave from Within Emacs
====================================

The package `octave' provides commands for running an inferior Octave
process in a special Emacs buffer.  Use
     M-x run-octave
   to directly start an inferior Octave process.  If Emacs does not know
about this command, add the line
     (autoload 'run-octave "octave-inf" nil t)
   to your `.emacs' file.

   This will start Octave in a special buffer the name of which is
specified by the variable `inferior-octave-buffer' and defaults to
"*Inferior Octave*".  From within this buffer, you can interact with
the inferior Octave process `as usual', i.e., by entering Octave
commands at the prompt.  The buffer is in Inferior Octave mode, which
is derived from the standard Comint mode, a major mode for interacting
with an inferior interpreter.  See the documentation for `comint-mode'
for more details, and use `C-h b' to find out about available special
keybindings.

   You can also communicate with an inferior Octave process from within
files with Octave code (i.e., buffers in Octave mode), using the
following commands.

`C-c i l'
     Send the current line to the inferior Octave process
     (`octave-send-line').  With positive prefix argument N, send that
     many lines.  If `octave-send-line-auto-forward' is non-`nil', go
     to the next unsent code line.

`C-c i b'
     Send the current block to the inferior Octave process
     (`octave-send-block').

`C-c i f'
     Send the current function to the inferior Octave process
     (`octave-send-defun').

`C-c i r'
     Send the region to the inferior Octave process
     (`octave-send-region').

`C-c i s'
     Make sure that `inferior-octave-buffer' is displayed
     (`octave-show-process-buffer').

`C-c i h'
     Delete all windows that display the inferior Octave buffer
     (`octave-hide-process-buffer').

`C-c i k'
     Kill the inferior Octave process and its buffer
     (`octave-kill-process').

   The effect of the commands which send code to the Octave process can
be customized by the following variables.

`octave-send-echo-input'
     Non-`nil' means echo input sent to the inferior Octave process.
     Default is `t'.

`octave-send-show-buffer'
     Non-`nil' means display the buffer running the Octave process after
     sending a command (but without selecting it).  Default is `t'.

   If you send code and there is no inferior Octave process yet, it
will be started automatically.

   The startup of the inferior Octave process is highly customizable.
The variable `inferior-octave-startup-args' can be used for specifying
command lines arguments to be passed to Octave on startup as a list of
strings.  For example, to suppress the startup message and use
`traditional' mode, set this to '("-q" "-traditional").  You can also
specify a startup file of Octave commands to be loaded on startup; note
that these commands will not produce any visible output in the process
buffer.  Which file to use is controlled by the variable
`inferior-octave-startup-file'.  If this is `nil', the file
`~/.emacs-octave' is used if it exists.

   And finally, `inferior-octave-mode-hook' is run after starting the
process and putting its buffer into Inferior Octave mode.  Hence, if you
like the up and down arrow keys to behave in the interaction buffer as
in the shell, and you want this buffer to use nice colors, add
     (add-hook 'inferior-octave-mode-hook
               (lambda ()
                 (turn-on-font-lock)
                 (define-key inferior-octave-mode-map [up]
                   'comint-previous-input)
                 (define-key inferior-octave-mode-map [down]
                   'comint-next-input)))
   to your `.emacs' file.  You could also swap the roles of `C-a'
(`beginning-of-line') and `C-c C-a' (`comint-bol') using this hook.

     *Note* that if you set your Octave prompts to something different
     from the defaults, make sure that `inferior-octave-prompt' matches
     them.  Otherwise, _nothing_ will work, because Emacs will not know
     when Octave is waiting for input, or done sending output.


File: octave.info,  Node: Using the Emacs Info Reader for Octave,  Prev: Running Octave from Within Emacs,  Up: Emacs Octave Support

H.4 Using the Emacs Info Reader for Octave
==========================================

You may also use the Emacs Info reader with Octave's `doc' function.
For this, the package `gnuserv' needs to be installed.

   If `gnuserv' is installed, add the lines
     (autoload 'octave-help "octave-hlp" nil t)
     (require 'gnuserv)
     (gnuserv-start)
   to your `.emacs' file.

   You can use either `plain' Emacs Info or the function `octave-help'
as your Octave info reader (for `help -i').  In the former case, use
`info_program ("info-emacs-info")'.  The latter is perhaps more
attractive because it allows to look up keys in the indices of
_several_ info files related to Octave (provided that the Emacs
variable `octave-help-files' is set correctly).  In this case, use
`info_program ("info-emacs-octave-help")'.

   If you use Octave from within Emacs, it is best to add these
settings to your `~/.emacs-octave' startup file (or the file pointed to
by the Emacs variable `inferior-octave-startup-file').


File: octave.info,  Node: Grammar and Parser,  Next: Copying,  Prev: Emacs Octave Support,  Up: Top

Appendix I Grammar and Parser
*****************************

This appendix will eventually contain a semi-formal description of
Octave's language.

* Menu:

* Keywords::
* Parser::


File: octave.info,  Node: Keywords,  Next: Parser,  Up: Grammar and Parser

I.1 Keywords
============

The following identifiers are keywords, and may not be used as variable
or function names:

`__FILE__'               `__LINE__'               `break'
`case'                   `catch'                  `classdef'
`continue'               `do'                     `else'
`elseif'                 `end'                    `end_try_catch'
`end_unwind_protect'     `endclassdef'            `endenumeration'
`endevents'              `endfor'                 `endfunction'
`endif'                  `endmethods'             `endparfor'
`endproperties'          `endswitch'              `endwhile'
`enumeration'            `events'                 `for'
`function'               `global'                 `if'
`methods'                `otherwise'              `parfor'
`persistent'             `properties'             `return'
`static'                 `switch'                 `try'
`until'                  `unwind_protect'         `unwind_protect_cleanup'
`while'                                           

   The function `iskeyword' can be used to quickly check whether an
identifier is reserved by Octave.

 -- Built-in Function:  iskeyword ()
 -- Built-in Function:  iskeyword (NAME)
     Return true if NAME is an Octave keyword.  If NAME is omitted,
     return a list of keywords.

     See also: *note isvarname: XREFisvarname, *note exist: XREFexist.



File: octave.info,  Node: Parser,  Prev: Keywords,  Up: Grammar and Parser

I.2 Parser
==========

The parser has a number of variables that affect its internal operation.
These variables are generally documented in the manual alongside the
code that they affect.  For example, `allow_noninteger_range_as_index'
is discussed in the section on index expressions.

   In addition, there are three non-specific parser customization
functions.  `add_input_event_hook' can be used to schedule a user
function for periodic evaluation.  `remove_input_event_hook' will stop
a user function from being evaluated periodically.

 -- Built-in Function: ID = add_input_event_hook (FCN)
 -- Built-in Function: ID = add_input_event_hook (FCN, DATA)
     Add the named function or function handle FCN to the list of
     functions to call periodically when Octave is waiting for input.
     The function should have the form

          FCN (DATA)

     If DATA is omitted, Octave calls the function without any
     arguments.

     The returned identifier may be used to remove the function handle
     from the list of input hook functions.

     See also: *note remove_input_event_hook:
     XREFremove_input_event_hook.


 -- Built-in Function:  remove_input_event_hook (NAME)
 -- Built-in Function:  remove_input_event_hook (FCN_ID)
     Remove the named function or function handle with the given
     identifier from the list of functions to call periodically when
     Octave is waiting for input.

     See also: *note add_input_event_hook: XREFadd_input_event_hook.


   Finally, when the parser cannot identify an input token it calls a
particular function to handle this.  By default, this is the function
"unimplemented" which makes suggestions about possible Octave
substitutes for MATLAB functions.

 -- Built-in Function: VAL = missing_function_hook ()
 -- Built-in Function: OLD_VAL = missing_function_hook (NEW_VAL)
 -- Built-in Function:  missing_function_hook (NEW_VAL, "local")
     Query or set the internal variable that specifies the function to
     call when an unknown identifier is requested.

     When called from inside a function with the "local" option, the
     variable is changed locally for the function and any subroutines
     it calls.  The original variable value is restored when exiting
     the function.


File: octave.info,  Node: Copying,  Next: Concept Index,  Prev: Grammar and Parser,  Up: Top

Appendix J GNU GENERAL PUBLIC LICENSE
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains
free software for all its users.  We, the Free Software Foundation, use
the GNU General Public License for most of our software; it applies
also to any other work released this way by its authors.  You can apply
it to your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the software,
or if you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those domains
in future versions of the GPL, as needed to protect the freedom of
users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it
     on a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may
     convey the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any
     non-source form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work
     with that Major Component, or to implement a Standard Interface
     for which an implementation is available to the public in source
     code form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including
     scripts to control those activities.  However, it does not include
     the work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files
     associated with source files for the work, and the source code for
     shared libraries and dynamically linked subprograms that the work
     is specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output,
     given its content, constitutes a covered work.  This License
     acknowledges your rights of fair use or other equivalent, as
     provided by copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for
     you, or provide you with facilities for running those works,
     provided that you comply with the terms of this License in
     conveying all material for which you do not control copyright.
     Those thus making or running the covered works for you must do so
     exclusively on your behalf, under your direction and control, on
     terms that prohibit them from making any copies of your
     copyrighted material outside their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention
     to limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for
          as long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of
          the written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access
          to the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated
          by you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to
          the object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long
          as needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.


     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product
     is a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or
     installed by the recipient, or for the User Product in which it
     has been modified or installed.  Access to a network may be denied
     when the modification itself materially and adversely affects the
     operation of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License
     with terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be
          marked in reasonable ways as different from the original
          version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or
     conveying under this License, you may add to a covered work
     material governed by the terms of that license document, provided
     that the further restriction does not survive such relicensing or
     conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under
     the third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, you do not qualify to receive new
     licenses for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

 10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to
     possession of the Corresponding Source of the work from the
     predecessor in interest, if the predecessor has it or can get it
     with reasonable efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for
     exercise of rights granted under this License, and you may not
     initiate litigation (including a cross-claim or counterclaim in a
     lawsuit) alleging that any patent claim is infringed by making,
     using, selling, offering for sale, or importing the Program or any
     portion of it.

 11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its
     contributor version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To
     "grant" such a patent license to a party means to make such an
     agreement or commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under
     which you make payment to the third party based on the extent of
     your activity of conveying the work, and under which the third
     party grants, to any of the parties who would receive the covered
     work from you, a discriminatory patent license (a) in connection
     with copies of the covered work conveyed by you (or copies made
     from those copies), or (b) primarily for and in connection with
     specific products or compilations that contain the covered work,
     unless you entered into that arrangement, or that patent license
     was granted, prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

 12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot convey a covered work so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not convey it
     at all.  For example, if you agree to terms that obligate you to
     collect a royalty for further conveying from those to whom you
     convey the Program, the only way you could satisfy both those
     terms and this License would be to refrain entirely from conveying
     the Program.

 13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

 14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.
     Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the
     Free Software Foundation.  If the Program does not specify a
     version number of the GNU General Public License, you may choose
     any version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

 15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

 16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

 17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.


END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see `http://www.gnu.org/licenses/'.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see `http://www.gnu.org/licenses/'.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read `http://www.gnu.org/philosophy/why-not-lgpl.html'.


File: octave.info,  Node: Concept Index,  Next: Function Index,  Prev: Copying,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* #:                                     Single Line Comments.
                                                              (line   6)
* #!:                                    Executable Octave Programs.
                                                              (line   6)
* #{:                                    Block Comments.      (line   6)
* %:                                     Single Line Comments.
                                                              (line   6)
* %{:                                    Block Comments.      (line   6)
* --braindead:                           Command Line Options.
                                                              (line 142)
* --built-in-docstrings-file FILENAME:   Command Line Options.
                                                              (line   9)
* --debug:                               Command Line Options.
                                                              (line  15)
* --debug-jit:                           Command Line Options.
                                                              (line  21)
* --doc-cache-file FILENAME:             Command Line Options.
                                                              (line  24)
* --echo-commands:                       Command Line Options.
                                                              (line  32)
* --exec-path PATH:                      Command Line Options.
                                                              (line  39)
* --force-gui:                           Command Line Options.
                                                              (line  46)
* --help:                                Command Line Options.
                                                              (line  51)
* --image-path PATH:                     Command Line Options.
                                                              (line  54)
* --info-file FILENAME:                  Command Line Options.
                                                              (line  61)
* --info-program PROGRAM:                Command Line Options.
                                                              (line  68)
* --interactive:                         Command Line Options.
                                                              (line  76)
* --line-editing:                        Command Line Options.
                                                              (line  82)
* --no-gui:                              Command Line Options.
                                                              (line  85)
* --no-history:                          Command Line Options.
                                                              (line  90)
* --no-init-file:                        Command Line Options.
                                                              (line  93)
* --no-init-path:                        Command Line Options.
                                                              (line  96)
* --no-jit-compiler:                     Command Line Options.
                                                              (line 100)
* --no-line-editing:                     Command Line Options.
                                                              (line 103)
* --no-site-file:                        Command Line Options.
                                                              (line 106)
* --no-window-system:                    Command Line Options.
                                                              (line 110)
* --norc:                                Command Line Options.
                                                              (line 115)
* --path PATH:                           Command Line Options.
                                                              (line 121)
* --persist:                             Command Line Options.
                                                              (line 128)
* --quiet:                               Command Line Options.
                                                              (line 134)
* --silent:                              Command Line Options.
                                                              (line 134)
* --texi-macros-file FILENAME:           Command Line Options.
                                                              (line 137)
* --traditional:                         Command Line Options.
                                                              (line 142)
* --verbose:                             Command Line Options.
                                                              (line 172)
* --version:                             Command Line Options.
                                                              (line 176)
* -?:                                    Command Line Options.
                                                              (line  51)
* -d:                                    Command Line Options.
                                                              (line  15)
* -f:                                    Command Line Options.
                                                              (line 115)
* -H:                                    Command Line Options.
                                                              (line  90)
* -h:                                    Command Line Options.
                                                              (line  51)
* -i:                                    Command Line Options.
                                                              (line  76)
* -p PATH:                               Command Line Options.
                                                              (line 121)
* -q:                                    Command Line Options.
                                                              (line 134)
* -v:                                    Command Line Options.
                                                              (line 176)
* -V:                                    Command Line Options.
                                                              (line 172)
* -x:                                    Command Line Options.
                                                              (line  32)
* ... continuation marker:               The try Statement.   (line  29)
* .octaverc:                             Startup Files.       (line  35)
* :end:                                  Index Expressions.   (line  46)
* \ continuation marker:                 The try Statement.   (line  29)
* acknowledgements:                      Acknowledgements.    (line   6)
* addition <1>:                          Operator Overloading.
                                                              (line   6)
* addition:                              Arithmetic Ops.      (line   6)
* and operator <1>:                      Operator Overloading.
                                                              (line   6)
* and operator:                          Boolean Expressions. (line   6)
* anonymous functions:                   Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* ans:                                   Variables.           (line  45)
* answers, incorrect <1>:                Bug Reporting.       (line  70)
* answers, incorrect:                    Bug Criteria.        (line  12)
* application-defined data:              Application-defined Data.
                                                              (line   6)
* apply:                                 Function Application.
                                                              (line   6)
* area series:                           Area Series.         (line   6)
* arguments in function call:            Calling Functions.   (line  15)
* arithmetic operators <1>:              Operator Overloading.
                                                              (line   6)
* arithmetic operators:                  Arithmetic Ops.      (line   6)
* array, creating a Java array:          Java Interface Functions.
                                                              (line  41)
* assignment expressions:                Assignment Ops.      (line   6)
* assignment operators:                  Assignment Ops.      (line   6)
* axes graphics object:                  Graphics Objects.    (line  19)
* axes properties:                       Axes Properties.     (line   6)
* bar series:                            Bar Series.          (line   6)
* batch processing:                      Executable Octave Programs.
                                                              (line   6)
* block comments:                        Block Comments.      (line   6)
* body of a loop:                        The while Statement. (line   6)
* boolean expressions <1>:               Operator Overloading.
                                                              (line   6)
* boolean expressions:                   Boolean Expressions. (line   6)
* boolean operators <1>:                 Operator Overloading.
                                                              (line   6)
* boolean operators:                     Boolean Expressions. (line   6)
* break statement:                       The break Statement. (line   6)
* broadcast:                             Broadcasting.        (line   6)
* broadcasting:                          Broadcasting.        (line   6)
* BSX:                                   Broadcasting.        (line   6)
* bug criteria:                          Bug Criteria.        (line   6)
* bug tracker:                           Bug Tracker.         (line   6)
* bugs:                                  Reporting Bugs.      (line   6)
* bugs, investigating:                   Bug Reporting.       (line 102)
* bugs, known:                           Trouble.             (line   6)
* bugs, reporting <1>:                   Bug Reporting.       (line   6)
* bugs, reporting:                       Bug Tracker.         (line   6)
* built-in data types:                   Built-in Data Types. (line   6)
* built-in function:                     A Sample Function Description.
                                                              (line  47)
* callbacks:                             Callbacks.           (line   6)
* calling Java from Octave:              Java Interface.      (line   6)
* calling Octave from Java:              Java Interface.      (line   6)
* case statement:                        The switch Statement.
                                                              (line   6)
* catch:                                 The try Statement.   (line   6)
* cell arrays <1>:                       Cell Arrays.         (line   6)
* cell arrays:                           Cell Array Objects.  (line   6)
* character strings <1>:                 Strings.             (line   6)
* character strings:                     String Objects.      (line   6)
* Cholesky factorization:                Matrix Factorizations.
                                                              (line  12)
* Citations:                             Citing Octave in Publications.
                                                              (line   6)
* Citing Octave:                         Citing Octave in Publications.
                                                              (line   6)
* classes, making available to Octave:   How to make Java classes available?.
                                                              (line   6)
* classpath, adding new path:            Java Interface Functions.
                                                              (line 121)
* classpath, difference between static and dynamic: How to make Java classes available?.
                                                              (line   6)
* classpath, displaying:                 Java Interface Functions.
                                                              (line  86)
* classpath, dynamic:                    Java Interface Functions.
                                                              (line  86)
* classpath, removing path:              Java Interface Functions.
                                                              (line 132)
* classpath, setting:                    How to make Java classes available?.
                                                              (line   6)
* classpath, static:                     Java Interface Functions.
                                                              (line  86)
* classpath.txt:                         How to make Java classes available?.
                                                              (line   6)
* clearing the screen:                   Cursor Motion.       (line  56)
* code profiling:                        Profiling.           (line   6)
* coding standards <1>:                  Contributing Guidelines.
                                                              (line   6)
* coding standards:                      Tips and Standards.  (line   6)
* colors, graphics:                      Colors.              (line   6)
* comma separated lists:                 Comma Separated Lists.
                                                              (line   6)
* command and output logs:               Diary and Echo Commands.
                                                              (line   6)
* command completion:                    Commands For Completion.
                                                              (line   6)
* command descriptions:                  A Sample Command Description.
                                                              (line   6)
* command echoing:                       Diary and Echo Commands.
                                                              (line   6)
* command history:                       Commands For History.
                                                              (line   6)
* command options:                       Command Line Options.
                                                              (line   6)
* command-line editing:                  Command Line Editing.
                                                              (line   6)
* comments:                              Comments.            (line   6)
* comparison expressions <1>:            Operator Overloading.
                                                              (line   6)
* comparison expressions:                Comparison Ops.      (line   6)
* complex-conjugate transpose <1>:       Operator Overloading.
                                                              (line   6)
* complex-conjugate transpose:           Arithmetic Ops.      (line   6)
* containers:                            Data Containers.     (line   6)
* continuation lines:                    The try Statement.   (line  29)
* continue statement:                    The continue Statement.
                                                              (line   6)
* contour series:                        Contour Groups.      (line   6)
* contributing to Octave:                How You Can Contribute to Octave.
                                                              (line   6)
* contributors:                          Preface.             (line   6)
* conversion specifications (printf):    Formatted Output.    (line  54)
* conversion specifications (scanf):     Formatted Input.     (line  97)
* copy-on-write:                         Miscellaneous Techniques.
                                                              (line  16)
* copyright:                             Copying.             (line   6)
* core dump:                             Bug Criteria.        (line   9)
* COW:                                   Miscellaneous Techniques.
                                                              (line  16)
* creating graphics objects:             Graphics Objects.    (line  40)
* cs-lists:                              Comma Separated Lists.
                                                              (line   6)
* customizing readline:                  Customizing readline.
                                                              (line   6)
* customizing the prompt:                Customizing the Prompt.
                                                              (line   6)
* DAE:                                   Differential Equations.
                                                              (line  15)
* data sources in object groups:         Data Sources in Object Groups.
                                                              (line   6)
* data structures <1>:                   Structures.          (line   6)
* data structures:                       Data Structure Objects.
                                                              (line   6)
* data types:                            Data Types.          (line   6)
* data types, built-in:                  Built-in Data Types. (line   6)
* data types, user-defined:              User-defined Data Types.
                                                              (line   6)
* decrement operator:                    Assignment Ops.      (line 163)
* default arguments:                     Default Arguments.   (line   6)
* default graphics properties:           Managing Default Properties.
                                                              (line   6)
* defining functions:                    Functions and Scripts.
                                                              (line   6)
* deprecated functions:                  Obsolete Functions.  (line   6)
* description format:                    Format of Descriptions.
                                                              (line   6)
* dialog, displaying a help dialog:      Dialog Box Functions.
                                                              (line  47)
* dialog, displaying a list dialog:      Dialog Box Functions.
                                                              (line 107)
* dialog, displaying a question dialog:  Dialog Box Functions.
                                                              (line 164)
* dialog, displaying a warning dialog:   Dialog Box Functions.
                                                              (line   9)
* dialog, displaying an error dialog:    Dialog Box Functions.
                                                              (line  30)
* dialog, displaying an input dialog:    Dialog Box Functions.
                                                              (line  64)
* diary of commands and output:          Diary and Echo Commands.
                                                              (line   6)
* differential equations:                Differential Equations.
                                                              (line  15)
* diffs, submitting:                     Sending Patches.     (line   6)
* distribution of Octave:                Distribution.        (line   6)
* division <1>:                          Operator Overloading.
                                                              (line   6)
* division:                              Arithmetic Ops.      (line   6)
* do-until statement:                    The do-until Statement.
                                                              (line   6)
* documentation fonts:                   Fonts.               (line   6)
* documentation notation:                Evaluation Notation. (line   6)
* documenting functions:                 Comments and the Help System.
                                                              (line   6)
* documenting Octave programs:           Comments.            (line   6)
* documenting user scripts:              Comments and the Help System.
                                                              (line   6)
* Dulmage-Mendelsohn decomposition:      Mathematical Considerations.
                                                              (line 413)
* dynamic classpath <1>:                 How to make Java classes available?.
                                                              (line   6)
* dynamic classpath:                     Java Interface Functions.
                                                              (line  86)
* dynamic classpath, adding new path:    Java Interface Functions.
                                                              (line 121)
* dynamic naming:                        Creating Structures. (line   6)
* dynamic-linking:                       External Code Interface.
                                                              (line   6)
* Dynamically Linked Functions:          External Code Interface.
                                                              (line   6)
* echoing executing commands:            Diary and Echo Commands.
                                                              (line   6)
* editing the command line:              Command Line Editing.
                                                              (line   6)
* element-by-element evaluation:         Element-by-element Boolean Operators.
                                                              (line   6)
* else statement:                        The if Statement.    (line   6)
* elseif statement:                      The if Statement.    (line   6)
* Emacs TAGS files:                      Using Octave Mode.   (line 257)
* end statement:                         Statements.          (line  16)
* end, indexing:                         Index Expressions.   (line  46)
* end_try_catch:                         The try Statement.   (line   6)
* end_unwind_protect:                    The unwind_protect Statement.
                                                              (line   6)
* endfor statement:                      The for Statement.   (line   6)
* endfunction statement:                 Defining Functions.  (line   6)
* endif statement:                       The if Statement.    (line   6)
* endswitch statement:                   The switch Statement.
                                                              (line   6)
* endwhile statement:                    The while Statement. (line   6)
* equality operator <1>:                 Operator Overloading.
                                                              (line   6)
* equality operator:                     Comparison Ops.      (line   6)
* equality, tests for <1>:               Operator Overloading.
                                                              (line   6)
* equality, tests for:                   Comparison Ops.      (line   6)
* equations, nonlinear:                  Nonlinear Equations. (line   6)
* erroneous messages:                    Bug Criteria.        (line  22)
* erroneous results <1>:                 Bug Reporting.       (line  70)
* erroneous results:                     Bug Criteria.        (line  12)
* error bar series:                      Error Bar Series.    (line   6)
* error ids:                             Catching Errors.     (line 122)
* error message notation:                Error Messages.      (line   6)
* error messages:                        Errors.              (line   6)
* error messages, incorrect:             Bug Criteria.        (line  22)
* escape sequence notation:              Escape Sequences in String Constants.
                                                              (line   6)
* evaluation notation:                   Evaluation Notation. (line   6)
* executable scripts:                    Executable Octave Programs.
                                                              (line   6)
* execution speed:                       Miscellaneous Techniques.
                                                              (line   6)
* exiting octave <1>:                    Quitting Octave.     (line   6)
* exiting octave:                        Running Octave.      (line  16)
* exponentiation <1>:                    Operator Overloading.
                                                              (line   6)
* exponentiation:                        Arithmetic Ops.      (line   6)
* expression, range:                     Ranges.              (line   6)
* expressions:                           Expressions.         (line   6)
* expressions, assignment:               Assignment Ops.      (line   6)
* expressions, boolean <1>:              Operator Overloading.
                                                              (line   6)
* expressions, boolean:                  Boolean Expressions. (line   6)
* expressions, comparison <1>:           Operator Overloading.
                                                              (line   6)
* expressions, comparison:               Comparison Ops.      (line   6)
* expressions, logical <1>:              Operator Overloading.
                                                              (line   6)
* expressions, logical:                  Boolean Expressions. (line   6)
* factorial function:                    Recursion.           (line   6)
* fatal signal:                          Bug Criteria.        (line   9)
* field, returning value of Java object field: Java Interface Functions.
                                                              (line  28)
* field, setting value of Java object field: Java Interface Functions.
                                                              (line  31)
* fields, displaying available fields of a Java object: Java Interface Functions.
                                                              (line  25)
* figure graphics object:                Graphics Objects.    (line  16)
* figure properties:                     Figure Properties.   (line   6)
* finding minimums:                      Minimizers.          (line   6)
* flag character (printf):               Output Conversion Syntax.
                                                              (line  28)
* flag character (scanf):                Input Conversion Syntax.
                                                              (line  34)
* for statement:                         The for Statement.   (line   6)
* Frobenius norm:                        Basic Matrix Functions.
                                                              (line 229)
* function application:                  Function Application.
                                                              (line   6)
* function descriptions:                 A Sample Function Description.
                                                              (line   6)
* function file <1>:                     Function Files.      (line   6)
* function file:                         A Sample Function Description.
                                                              (line  43)
* function statement:                    Defining Functions.  (line   6)
* functions, deprecated:                 Obsolete Functions.  (line   6)
* functions, obsolete:                   Obsolete Functions.  (line   6)
* functions, user-defined:               Functions and Scripts.
                                                              (line   6)
* funding Octave development:            How You Can Contribute to Octave.
                                                              (line   6)
* general p-norm:                        Basic Matrix Functions.
                                                              (line 232)
* global statement:                      Global Variables.    (line   6)
* global variables:                      Global Variables.    (line   6)
* grammar rules:                         Grammar and Parser.  (line   6)
* graphics:                              Plotting.            (line   6)
* graphics colors:                       Colors.              (line   6)
* graphics data structures:              Graphics Data Structures.
                                                              (line   6)
* graphics line styles:                  Line Styles.         (line   6)
* graphics marker styles:                Marker Styles.       (line   6)
* graphics object properties:            Graphics Object Properties.
                                                              (line   6)
* graphics object, axes:                 Graphics Objects.    (line  19)
* graphics object, figure:               Graphics Objects.    (line  16)
* graphics object, image:                Graphics Objects.    (line  29)
* graphics object, line:                 Graphics Objects.    (line  23)
* graphics object, patch:                Graphics Objects.    (line  32)
* graphics object, root figure:          Graphics Objects.    (line  12)
* graphics object, surface:              Graphics Objects.    (line  35)
* graphics object, text:                 Graphics Objects.    (line  26)
* graphics objects:                      Graphics Objects.    (line   6)
* graphics properties, default:          Managing Default Properties.
                                                              (line   6)
* graphics toolkits:                     Graphics Toolkits.   (line   6)
* greater than operator <1>:             Operator Overloading.
                                                              (line   6)
* greater than operator:                 Comparison Ops.      (line   6)
* group objects <1>:                     Surface Group.       (line   6)
* group objects <2>:                     Stair Group.         (line   6)
* group objects <3>:                     Scatter Group.       (line   6)
* group objects:                         Quiver Group.        (line   6)
* handle functions:                      Graphics Objects.    (line 222)
* handle, function handles:              Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* header comments:                       Function Headers.    (line   6)
* help, online:                          Getting Help.        (line   6)
* help, user-defined functions:          Comments and the Help System.
                                                              (line   6)
* help, where to find:                   Service.             (line   6)
* Hermitian operator <1>:                Operator Overloading.
                                                              (line   6)
* Hermitian operator:                    Arithmetic Ops.      (line   6)
* Hessenberg decomposition:              Matrix Factorizations.
                                                              (line 144)
* history:                               Preface.             (line   6)
* history of commands:                   Commands For History.
                                                              (line   6)
* if statement:                          The if Statement.    (line   6)
* image graphics object:                 Graphics Objects.    (line  29)
* image properties:                      Image Properties.    (line   6)
* improving Octave <1>:                  Sending Patches.     (line   6)
* improving Octave:                      Bug Criteria.        (line  29)
* incorrect error messages:              Bug Criteria.        (line  22)
* incorrect output <1>:                  Bug Reporting.       (line  70)
* incorrect output:                      Bug Criteria.        (line  12)
* incorrect results <1>:                 Bug Reporting.       (line  70)
* incorrect results:                     Bug Criteria.        (line  12)
* increment operator:                    Assignment Ops.      (line 163)
* infinity norm:                         Basic Matrix Functions.
                                                              (line 225)
* initialization:                        Startup Files.       (line   6)
* inline, inline functions:              Function Handles Anonymous Functions Inline Functions.
                                                              (line   6)
* input conversions, for scanf:          Table of Input Conversions.
                                                              (line   6)
* input history:                         Commands For History.
                                                              (line   6)
* installation trouble:                  Trouble.             (line   6)
* installing Octave:                     Installation.        (line   6)
* instance, how to create:               How to create an instance of a Java class?.
                                                              (line   6)
* introduction:                          Introduction.        (line   6)
* introduction to graphics structures:   Introduction to Graphics Structures.
                                                              (line   6)
* invalid input:                         Bug Criteria.        (line  24)
* Java, calling from Octave:             Java Interface.      (line   6)
* Java, using with Octave:               Java Interface.      (line   6)
* javaclasspath.txt:                     How to make Java classes available?.
                                                              (line   6)
* Kendall's Tau:                         Correlation and Regression Analysis.
                                                              (line  71)
* keywords:                              Keywords.            (line   6)
* known causes of trouble:               Trouble.             (line   6)
* language definition:                   Grammar and Parser.  (line   6)
* less than operator <1>:                Operator Overloading.
                                                              (line   6)
* less than operator:                    Comparison Ops.      (line   6)
* line graphics object:                  Graphics Objects.    (line  23)
* line properties:                       Line Properties.     (line   6)
* line series:                           Line Series.         (line   6)
* line styles, graphics:                 Line Styles.         (line   6)
* loadable function:                     A Sample Function Description.
                                                              (line  51)
* loading data:                          Simple File I/O.     (line   6)
* local minimum:                         Minimizers.          (line   6)
* logging commands and output:           Diary and Echo Commands.
                                                              (line   6)
* logical expressions <1>:               Operator Overloading.
                                                              (line   6)
* logical expressions:                   Boolean Expressions. (line   6)
* logical operators <1>:                 Operator Overloading.
                                                              (line   6)
* logical operators:                     Boolean Expressions. (line   6)
* loop:                                  The while Statement. (line   6)
* looping over structure elements:       Looping Over Structure Elements.
                                                              (line   6)
* LP:                                    Optimization.        (line  18)
* LU decomposition <1>:                  Iterative Techniques.
                                                              (line 282)
* LU decomposition:                      Matrix Factorizations.
                                                              (line 168)
* lvalue:                                Assignment Ops.      (line  33)
* map:                                   Function Application.
                                                              (line   6)
* mapping function:                      A Sample Function Description.
                                                              (line  57)
* marker styles, graphics:               Marker Styles.       (line   6)
* matching failure, in scanf:            Formatted Input.     (line 102)
* matrices:                              Matrices.            (line   6)
* matrix multiplication <1>:             Operator Overloading.
                                                              (line   6)
* matrix multiplication:                 Arithmetic Ops.      (line   6)
* maximum field width (scanf):           Input Conversion Syntax.
                                                              (line  42)
* memory management:                     Miscellaneous Techniques.
                                                              (line  16)
* memory, displaying Java memory status: Java Interface Functions.
                                                              (line 170)
* memory, limitations:                   How can I handle memory limitations?.
                                                              (line   6)
* messages, error:                       Errors.              (line   6)
* method, invoking a method of a Java object: Java Interface Functions.
                                                              (line  60)
* methods, displaying available methods of a Java object: Java Interface Functions.
                                                              (line  78)
* mex:                                   Mex-Files.           (line   6)
* mex-files:                             Mex-Files.           (line   6)
* minimum field width (printf):          Output Conversion Syntax.
                                                              (line  35)
* missing data:                          Missing Data.        (line   6)
* mkoctfile:                             Oct-Files.           (line   6)
* multi-line comments:                   Block Comments.      (line   6)
* multiplication <1>:                    Operator Overloading.
                                                              (line   6)
* multiplication:                        Arithmetic Ops.      (line   6)
* negation <1>:                          Operator Overloading.
                                                              (line   6)
* negation:                              Arithmetic Ops.      (line   6)
* NLP:                                   Optimization.        (line  18)
* nonlinear equations:                   Nonlinear Equations. (line   6)
* nonlinear programming:                 Optimization.        (line  18)
* not operator <1>:                      Operator Overloading.
                                                              (line   6)
* not operator:                          Boolean Expressions. (line   6)
* numeric constant <1>:                  Numeric Data Types.  (line   6)
* numeric constant:                      Numeric Objects.     (line   6)
* numeric value <1>:                     Numeric Data Types.  (line   6)
* numeric value:                         Numeric Objects.     (line   6)
* object groups:                         Object Groups.       (line   6)
* object, creating a Java object:        Java Interface Functions.
                                                              (line  10)
* object, how to create:                 How to create an instance of a Java class?.
                                                              (line   6)
* obsolete functions:                    Obsolete Functions.  (line   6)
* oct:                                   Oct-Files.           (line   6)
* oct-files:                             Oct-Files.           (line   6)
* Octave and MATLAB, how to distinguish between: How to distinguish between Octave and Matlab?.
                                                              (line   6)
* Octave API:                            External Code Interface.
                                                              (line   6)
* Octave command options:                Command Line Options.
                                                              (line   6)
* Octave development:                    Contributing Guidelines.
                                                              (line   6)
* Octave, calling from Java:             Java Interface.      (line   6)
* octave-tags:                           Using Octave Mode.   (line 257)
* ODE:                                   Differential Equations.
                                                              (line  15)
* online help:                           Getting Help.        (line   6)
* operator precedence:                   Operator Precedence. (line   6)
* operators, arithmetic <1>:             Operator Overloading.
                                                              (line   6)
* operators, arithmetic:                 Arithmetic Ops.      (line   6)
* operators, assignment:                 Assignment Ops.      (line   6)
* operators, boolean <1>:                Operator Overloading.
                                                              (line   6)
* operators, boolean:                    Boolean Expressions. (line   6)
* operators, decrement:                  Assignment Ops.      (line 163)
* operators, increment:                  Assignment Ops.      (line 163)
* operators, logical <1>:                Operator Overloading.
                                                              (line   6)
* operators, logical:                    Boolean Expressions. (line   6)
* operators, relational <1>:             Operator Overloading.
                                                              (line   6)
* operators, relational:                 Comparison Ops.      (line   6)
* optimization <1>:                      Optimization.        (line  18)
* optimization:                          Miscellaneous Techniques.
                                                              (line   6)
* options, Octave command:               Command Line Options.
                                                              (line   6)
* or operator <1>:                       Operator Overloading.
                                                              (line   6)
* or operator:                           Boolean Expressions. (line   6)
* oregonator:                            Ordinary Differential Equations.
                                                              (line 148)
* otherwise statement:                   The switch Statement.
                                                              (line   6)
* output conversions, for printf:        Table of Output Conversions.
                                                              (line   6)
* parser:                                Parser.              (line   6)
* patch graphics object:                 Graphics Objects.    (line  32)
* patch properties:                      Patch Properties.    (line   6)
* patches, submitting:                   Sending Patches.     (line   6)
* path, adding to classpath:             Java Interface Functions.
                                                              (line 121)
* path, removing from classpath:         Java Interface Functions.
                                                              (line 132)
* persistent statement:                  Persistent Variables.
                                                              (line   6)
* persistent variables:                  Persistent Variables.
                                                              (line   6)
* personal startup file:                 Startup Files.       (line  31)
* PKG_ADD:                               Creating Packages.   (line  46)
* PKG_DEL:                               Creating Packages.   (line  64)
* plotting:                              Plotting.            (line   6)
* precision (printf):                    Output Conversion Syntax.
                                                              (line  47)
* printing notation:                     Printing Notation.   (line   6)
* printing plots:                        Printing and Saving Plots.
                                                              (line   6)
* profiler:                              Profiling.           (line   6)
* program, self contained:               Executable Octave Programs.
                                                              (line   6)
* Progress Bar:                          Progress Bar.        (line   6)
* project startup file:                  Startup Files.       (line  35)
* prompt customization:                  Customizing the Prompt.
                                                              (line   6)
* QP:                                    Optimization.        (line  18)
* QR factorization:                      Matrix Factorizations.
                                                              (line 267)
* quadratic programming:                 Optimization.        (line  18)
* quitting octave <1>:                   Quitting Octave.     (line   6)
* quitting octave:                       Running Octave.      (line  16)
* quiver group:                          Quiver Group.        (line   6)
* quotient <1>:                          Operator Overloading.
                                                              (line   6)
* quotient:                              Arithmetic Ops.      (line   6)
* range expressions:                     Ranges.              (line   6)
* readline customization:                Customizing readline.
                                                              (line   6)
* recycling:                             Broadcasting.        (line   6)
* relational operators <1>:              Operator Overloading.
                                                              (line   6)
* relational operators:                  Comparison Ops.      (line   6)
* reporting bugs <1>:                    Bug Tracker.         (line   6)
* reporting bugs:                        Reporting Bugs.      (line   6)
* results, incorrect <1>:                Bug Reporting.       (line  70)
* results, incorrect:                    Bug Criteria.        (line  12)
* root figure graphics object:           Graphics Objects.    (line  12)
* root figure properties:                Root Figure Properties.
                                                              (line   6)
* saving data:                           Simple File I/O.     (line   6)
* saving graphics objects:               Graphics Objects.    (line 460)
* saving plots:                          Printing and Saving Plots.
                                                              (line   6)
* scatter group:                         Scatter Group.       (line   6)
* Schur decomposition:                   Matrix Factorizations.
                                                              (line 511)
* script files:                          Functions and Scripts.
                                                              (line   6)
* scripts:                               Executable Octave Programs.
                                                              (line   6)
* self contained programs:               Executable Octave Programs.
                                                              (line   6)
* series objects <1>:                    Stem Series.         (line   6)
* series objects <2>:                    Line Series.         (line   6)
* series objects <3>:                    Error Bar Series.    (line   6)
* series objects <4>:                    Contour Groups.      (line   6)
* series objects <5>:                    Bar Series.          (line   6)
* series objects:                        Area Series.         (line   6)
* short-circuit evaluation:              Short-circuit Boolean Operators.
                                                              (line   6)
* side effect:                           Assignment Ops.      (line  26)
* SIMD:                                  Broadcasting.        (line   6)
* singular value decomposition:          Matrix Factorizations.
                                                              (line 566)
* site startup file:                     Startup Files.       (line  11)
* Spearman's Rho:                        Correlation and Regression Analysis.
                                                              (line  55)
* speedups:                              Miscellaneous Techniques.
                                                              (line   6)
* stair group:                           Stair Group.         (line   6)
* standards of coding style:             Tips and Standards.  (line   6)
* startup:                               Startup Files.       (line   6)
* startup files:                         Startup Files.       (line  10)
* statements:                            Statements.          (line   6)
* static classpath <1>:                  How to make Java classes available?.
                                                              (line   6)
* static classpath:                      Java Interface Functions.
                                                              (line  86)
* stem series:                           Stem Series.         (line   6)
* strings <1>:                           Strings.             (line   6)
* strings:                               String Objects.      (line   6)
* structural rank:                       Sparse Linear Algebra.
                                                              (line 251)
* structure elements, looping over:      Looping Over Structure Elements.
                                                              (line   6)
* structures <1>:                        Structures.          (line   6)
* structures:                            Data Structure Objects.
                                                              (line   6)
* submitting diffs:                      Sending Patches.     (line   6)
* submitting patches:                    Sending Patches.     (line   6)
* subtraction <1>:                       Operator Overloading.
                                                              (line   6)
* subtraction:                           Arithmetic Ops.      (line   6)
* suggestions:                           Bug Criteria.        (line  29)
* surface graphics object:               Graphics Objects.    (line  35)
* surface group:                         Surface Group.       (line   6)
* surface properties:                    Surface Properties.  (line   6)
* switch statement:                      The switch Statement.
                                                              (line   6)
* symbols, translation table:            Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* TAGS:                                  Using Octave Mode.   (line 257)
* test functions:                        Test and Demo Functions.
                                                              (line   6)
* tests for equality <1>:                Operator Overloading.
                                                              (line   6)
* tests for equality:                    Comparison Ops.      (line   6)
* TeX symbols, translation table:        Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* text graphics object:                  Graphics Objects.    (line  26)
* text properties:                       Text Properties.     (line   6)
* tips:                                  Tips and Standards.  (line   6)
* toolkit customization:                 Customizing Toolkit Behavior.
                                                              (line   6)
* toolkits, graphics:                    Graphics Toolkits.   (line   6)
* translation table for TeX symbols:     Which TeX symbols are implemented in dialog functions?.
                                                              (line   6)
* transpose <1>:                         Operator Overloading.
                                                              (line   6)
* transpose:                             Arithmetic Ops.      (line   6)
* transpose, complex-conjugate <1>:      Operator Overloading.
                                                              (line   6)
* transpose, complex-conjugate:          Arithmetic Ops.      (line   6)
* troubleshooting:                       Trouble.             (line   6)
* try statement:                         The try Statement.   (line   6)
* unary minus <1>:                       Operator Overloading.
                                                              (line   6)
* unary minus:                           Arithmetic Ops.      (line   6)
* undefined behavior:                    Bug Criteria.        (line  15)
* undefined function value:              Bug Criteria.        (line  15)
* unwind_protect statement:              The unwind_protect Statement.
                                                              (line   6)
* unwind_protect_cleanup:                The unwind_protect Statement.
                                                              (line   6)
* use of comments:                       Comments.            (line   6)
* user-defined data types:               User-defined Data Types.
                                                              (line   6)
* user-defined functions:                Functions and Scripts.
                                                              (line   6)
* user-defined variables:                Variables.           (line   6)
* using Octave with Java:                Java Interface.      (line   6)
* varargin:                              Variable-length Argument Lists.
                                                              (line   6)
* varargout:                             Variable-length Return Lists.
                                                              (line   6)
* variable-length argument lists:        Variable-length Argument Lists.
                                                              (line   6)
* variable-length return lists:          Variable-length Return Lists.
                                                              (line   6)
* variables, global:                     Global Variables.    (line   6)
* variables, persistent:                 Persistent Variables.
                                                              (line   6)
* variables, user-defined:               Variables.           (line   6)
* vectorization:                         Vectorization and Faster Code Execution.
                                                              (line   6)
* vectorize:                             Vectorization and Faster Code Execution.
                                                              (line   6)
* version startup file:                  Startup Files.       (line  21)
* warning ids:                           Issuing Warnings.    (line  98)
* warranty:                              Copying.             (line   6)
* while statement:                       The while Statement. (line   6)
* wrong answers <1>:                     Bug Reporting.       (line  70)
* wrong answers:                         Bug Criteria.        (line  12)
* ~/.inputrc:                            Customizing readline.
                                                              (line   6)
* ~/.octaverc:                           Startup Files.       (line  31)

