@c Copyright (C) 1996, 1997, 2007, 2008, 2009 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c 
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c 
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@c The text of this file appears in the file INSTALL in the Octave
@c distribution, as well as in the Octave manual.

@ifclear INSTALLONLY
@node Installation
@appendix Installing Octave
@end ifclear

@ifset INSTALLONLY
@include conf.texi

This file documents the installation of Octave.

Octave is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation.

@strong{Note:} This file is automatically generated from
@file{doc/interpreter/install.txi} in the Octave sources.  To update
the documentation make changes to the .txi source file rather than this
derived file.

@node Installation
@chapter Installing Octave
@end ifset

@cindex installing Octave

Here is the procedure for installing Octave from scratch on a Unix
system.

@itemize @bullet
@item
Run the shell script @file{configure}.  This will determine the features
your system has (or doesn't have) and create a file named
@file{Makefile} from each of the files named @file{Makefile.in}.

Here is a summary of the configure options that are most frequently used
when building Octave:

@table @code
@item --prefix=@var{prefix}
Install Octave in subdirectories below @var{prefix}.  The default value
of @var{prefix} is @file{/usr/local}.

@item --srcdir=@var{dir}
Look for Octave sources in the directory @var{dir}.

@item --enable-bounds-check
Enable bounds checking for indexing operators in the internal array
classes.  This option is primarily used for debugging Octave.  Building
Octave with this option has a negative impact on performance and is not
recommended for general use.

@item --enable-64
This is an @strong{experimental} option to enable Octave to use 64-bit
integers for array dimensions and indexing on 64-bit platforms.  You
probably don't want to use this option unless you know what you are
doing.

If you use @code{--enable-64}, you must ensure that your Fortran
compiler generates code with 8 byte signed @code{INTEGER} values, and
that your @sc{blas} and @sc{lapack} libraries are compiled to use 8 byte
signed integers for array dimensions and indexing.

@item --enable-shared
Create shared libraries (this is the default).  If you are planning to
use the dynamic loading features, you will probably want to use this
option.  It will make your @file{.oct} files much smaller and on some
systems it may be necessary to build shared libraries in order to use
dynamically linked functions.

You may also want to build a shared version of @code{libstdc++}, if your
system doesn't already have one.

@item --enable-dl
Use @code{dlopen} and friends to make Octave capable of dynamically
linking externally compiled functions (this is the default if
@code{--enable-shared} is specified).  This option only works on systems
that actually have these functions.  If you plan on using this feature, you
should probably also use @code{--enable-shared} to reduce the size of
your @file{.oct} files.

@item --without-blas
Compile and use the generic @sc{blas} and @sc{lapack} versions included with
Octave.  By default, configure first looks for @sc{blas} and @sc{lapack} matrix
libraries on your system, including optimized @sc{blas} implementations such
as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
an optimized @sc{blas} will generally result in several-times faster matrix
operations.)  Only use this option if your system has @sc{blas}/@sc{lapack}
libraries that cause problems for some reason.  You can also use
@code{--with-blas=lib} to specify a particular @sc{blas} library
 that configure doesn't check for automatically.

@item --without-ccolamd
Don't use CCOLAMD, disable some sparse matrix functionality.

@item --without-colamd
Don't use COLAMD, disable some sparse matrix functionality.

@item --without-curl
Don't use the cURL, disable the @code{urlread} and @code{urlwrite}
functions.

@item --without-cxsparse
Don't use CXSPARSE, disable some sparse matrix functionality.

@item --without-umfpack
Don't use UMFPACK, disable some sparse matrix functionality.

@item --without-fftw
Use the included @sc{fftpack} library instead of the @sc{fftw} library.

@item --without-glpk
Don't use the GLPK library for linear programming.

@item --without-hdf5
Don't use the HDF5 library for reading and writing HDF5 files.

@item --without-zlib
Don't use the zlib library, disable data file compression and support
for recent MAT file formats.

@item --without-lapack
Compile and use the generic @sc{blas} and @sc{lapack} versions included with
Octave.  By default, configure first looks for @sc{blas} and @sc{lapack} matrix
libraries on your system, including optimized @sc{blas} implementations such
as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
an optimized @sc{blas} will generally result in several-times faster matrix
operations.)  Only use this option if your system has @sc{blas}/@sc{lapack}
libraries that cause problems for some reason.  You can also use
@code{--with-blas=lib} to specify a particular @sc{blas} library
 that configure doesn't check for automatically.

@item --without-framework-carbon
Don't use framework Carbon headers, libraries and specific source code
for compilation even if the configure test succeeds (the default value
is @code{--with-framework-carbon}).  This is a platform specific configure
option for Mac systems.

@item --without-framework-opengl
Don't use framework OpenGL headers, libraries and specific source code
for compilation even if the configure test succeeds.  If this option is
given then OpenGL headers and libraries in standard system locations are
tested (the default value is @code{--with-framework-opengl}).  This is a
platform specific configure option for Mac systems.

@item --help
Print a summary of the options recognized by the configure script.
@end table

See the file @file{INSTALL} for more general information about the 
command line options used by configure.  That file also contains 
instructions for compiling in a directory other than where the source 
is located.

@item
Run make.

You will need a recent version of GNU Make.  Modifying Octave's
makefiles to work with other make programs is probably not worth
your time.  We recommend you get and compile GNU Make instead.

For plotting, you will need to have gnuplot installed on your system.
Gnuplot is a command-driven interactive function plotting program.
Gnuplot is copyrighted, but freely distributable.  The `gnu' in gnuplot
is a coincidence---it is not related to the GNU project or the FSF in
any but the most peripheral sense.

To compile Octave, you will need a recent version of GNU Make.  You will
also need a recent version of @code{g++} or other ANSI C++ compiler.  You
will also need a Fortran 77 compiler or @code{f2c}.  If you use
@code{f2c}, you will need a script like @code{fort77} that works like a
normal Fortran compiler by combining @code{f2c} with your C compiler in
a single script.

If you plan to modify the parser you will also need GNU @code{bison} and
@code{flex}.  If you modify the documentation, you will need GNU
Texinfo, along with the patch for the @code{makeinfo} program that is
distributed with Octave.

GNU Make, @code{gcc}, and @code{libstdc++}, @code{gnuplot},
@code{bison}, @code{flex}, and Texinfo are all available from many
anonymous ftp archives.  The primary site is @url{ftp.gnu.org}, but it
is often very busy.  A list of sites that mirror the software on
@url{ftp.gnu.org} is available by anonymous ftp from
@url{ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP}.

You will need about 1 gigabyte of disk storage to work with when
building Octave from source (considerably less if you don't compile with
debugging symbols).  To do that, use the command

@example
make CFLAGS=-O CXXFLAGS=-O LDFLAGS=
@end example

@noindent
instead of just @samp{make}.

@item
If you encounter errors while compiling Octave, first check the list of
known problems below to see if there is a workaround or solution for
your problem.  If not,
@ifclear INSTALLONLY
see @ref{Trouble},
@end ifclear
@ifset INSTALLONLY
see the file BUGS
@end ifset
for information about how to report bugs.

@item
Once you have successfully compiled Octave, run @samp{make install}.

This will install a copy of Octave, its libraries, and its documentation
in the destination directory.  As distributed, Octave is installed in
the following directories.  In the table below, @var{prefix} defaults to
@file{/usr/local}, @var{version} stands for the current version number
of the interpreter, and @var{arch} is the type of computer on which
Octave is installed (for example, @samp{i586-unknown-gnu}).

@table @file
@item @var{prefix}/bin
Octave and other binaries that people will want to run directly.

@item @var{prefix}/lib
Libraries like libcruft.a and liboctave.a.

@item @var{prefix}/share
Architecture-independent data files.

@item @var{prefix}/include/octave
Include files distributed with Octave.

@item @var{prefix}/man/man1
Unix-style man pages describing Octave.

@item @var{prefix}/info
Info files describing Octave.

@item @var{prefix}/share/octave/@var{version}/m
Function files distributed with Octave.  This includes the Octave
version, so that multiple versions of Octave may be installed at the
same time.

@item @var{prefix}/lib/octave/@var{version}/exec/@var{arch}
Executables to be run by Octave rather than the user.

@item @var{prefix}/lib/octave/@var{version}/oct/@var{arch}
Object files that will be dynamically loaded.

@item @var{prefix}/share/octave/@var{version}/imagelib
Image files that are distributed with Octave.
@end table
@end itemize

@menu
* Installation Problems::       
@end menu

@node Installation Problems
@appendixsec Installation Problems

This section contains a list of problems (and some apparent problems
that don't really mean anything is wrong) that may show up during
installation of Octave.

@itemize @bullet
@item
On some SCO systems, @code{info} fails to compile if
@w{@code{HAVE_TERMIOS_H}} is defined in @file{config.h}.  Simply removing
the definition from @file{info/config.h} should allow it to compile.

@item
If @code{configure} finds @code{dlopen}, @code{dlsym}, @code{dlclose},
and @code{dlerror}, but not the header file @file{dlfcn.h}, you need to
find the source for the header file and install it in the directory
@file{usr/include}.  This is reportedly a problem with Slackware 3.1.
For Linux/GNU systems, the source for @file{dlfcn.h} is in the
@code{ldso} package.

@item
Building @file{.oct} files doesn't work.

You should probably have a shared version of @code{libstdc++}.  A patch
is needed to build shared versions of version 2.7.2 of @code{libstdc++}
on the HP-PA architecture.  You can find the patch at
@url{ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix}.

@item
On some alpha systems there may be a problem with the @code{libdxml}
library, resulting in floating point errors and/or segmentation faults in
the linear algebra routines called by Octave.  If you encounter such
problems, then you should modify the configure script so that
@w{@code{SPECIAL_MATH_LIB}} is not set to @code{-ldxml}.

@item
On FreeBSD systems Octave may hang while initializing some internal
constants.  The fix appears to be to use

@example
options      GPL_MATH_EMULATE
@end example

@noindent
rather than 

@example
options      MATH_EMULATE 
@end example

@noindent
in the kernel configuration files (typically found in the directory
@file{/sys/i386/conf}.  After making this change, you'll need to rebuild
the kernel, install it, and reboot.

@item
If you encounter errors like

@example
@group
passing `void (*)()' as argument 2 of
  `octave_set_signal_handler(int, void (*)(int))'
@end group
@end example

@noindent
or

@example
@group
warning: ANSI C++ prohibits conversion from `(int)' 
         to `(@dots{})'
@end group
@end example

@noindent
while compiling @file{sighandlers.cc}, you may need to edit some files
in the @code{gcc} include subdirectory to add proper prototypes for functions
there.  For example, Ultrix 4.2 needs proper declarations for the
@code{signal} function and the @w{@code{SIG_IGN}} macro in the file
@file{signal.h}.

On some systems the @w{@code{SIG_IGN}} macro is defined to be something like
this:

@example
#define  SIG_IGN  (void (*)())1
@end example

@noindent
when it should really be something like:

@example
#define  SIG_IGN  (void (*)(int))1
@end example

@noindent
to match the prototype declaration for the @code{signal} function.  This
change should also be made for the @w{@code{SIG_DFL}} and @w{@code{SIG_ERR}}
symbols.  It may be necessary to change the definitions in
@file{sys/signal.h} as well.

The @code{gcc} @code{fixincludes} and @code{fixproto} scripts should
probably fix these problems when @code{gcc} installs its modified set of
header files, but I don't think that's been done yet.

@strong{You should not change the files in @file{/usr/include}}.  You
can find the @code{gcc} include directory tree by running the command

@example
gcc -print-libgcc-file-name
@end example

@noindent
The directory of @code{gcc} include files normally begins in the same directory
that contains the file @file{libgcc.a}.

@item
Some of the Fortran subroutines may fail to compile with older versions
of the Sun Fortran compiler.  If you get errors like

@example
@group
zgemm.f:
	zgemm:
warning: unexpected parent of complex expression subtree
zgemm.f, line 245: warning: unexpected parent of complex
  expression subtree
warning: unexpected parent of complex expression subtree
zgemm.f, line 304: warning: unexpected parent of complex
  expression subtree
warning: unexpected parent of complex expression subtree
zgemm.f, line 327: warning: unexpected parent of complex
  expression subtree
pcc_binval: missing IR_CONV in complex op
make[2]: *** [zgemm.o] Error 1
@end group
@end example

@noindent
when compiling the Fortran subroutines in the @file{libcruft}
subdirectory, you should either upgrade your compiler or try compiling
with optimization turned off.

@item
On NeXT systems, if you get errors like this:

@example
@group
/usr/tmp/cc007458.s:unknown:Undefined local 
      symbol LBB7656
/usr/tmp/cc007458.s:unknown:Undefined local
      symbol LBE7656
@end group
@end example

@noindent
when compiling @file{Array.cc} and @file{Matrix.cc}, try recompiling
these files without @code{-g}.

@item
Some people have reported that calls to shell_cmd and the pager do not
work on SunOS systems.  This is apparently due to having
@w{@code{G_HAVE_SYS_WAIT}} defined to be 0 instead of 1 when compiling
@code{libg++}.

@item
On NeXT systems, linking to @file{libsys_s.a} may fail to resolve the
following functions

@example
@group
_tcgetattr
_tcsetattr
_tcflow
@end group
@end example

@noindent
which are part of @file{libposix.a}.  Unfortunately, linking Octave with
@code{-posix} results in the following undefined symbols.

@example
@group
.destructors_used
.constructors_used
_objc_msgSend
_NXGetDefaultValue
_NXRegisterDefaults
.objc_class_name_NXStringTable
.objc_class_name_NXBundle
@end group
@end example

One kluge around this problem is to extract @file{termios.o} from
@file{libposix.a}, put it in Octave's @file{src} directory, and add it
to the list of files to link together in the makefile.  Suggestions for
better ways to solve this problem are welcome!

@item
If Octave crashes immediately with a floating point exception, it is
likely that it is failing to initialize the IEEE floating point values
for infinity and NaN.

If your system actually does support IEEE arithmetic, you should be able
to fix this problem by modifying the function @code{octave_ieee_init} in
the file @file{lo-ieee.cc} to correctly initialize Octave's internal
infinity and NaN variables.

If your system does not support IEEE arithmetic but Octave's configure
script incorrectly determined that it does, you can work around the
problem by editing the file @file{config.h} to not define
@w{@code{HAVE_ISINF}}, @w{@code{HAVE_FINITE}}, and @w{@code{HAVE_ISNAN}}.

In any case, please report this as a bug since it might be possible to
modify Octave's configuration script to automatically determine the
proper thing to do.

@item
If Octave is unable to find a header file because it is installed in a
location that is not normally searched by the compiler, you can add the
directory to the include search path by specifying (for example)
@code{CPPFLAGS=-I/some/nonstandard/directory} as an argument to
@code{configure}.  Other variables that can be specified this way are
@code{CFLAGS}, @code{CXXFLAGS}, @code{FFLAGS}, and @code{LDFLAGS}.
Passing them as options to the configure script also records them in the
@file{config.status} file.  By default, @code{CPPFLAGS} and
@code{LDFLAGS} are empty, @code{CFLAGS} and @code{CXXFLAGS} are set to
@code{"-g -O"} and @code{FFLAGS} is set to @code{"-O"}.

@end itemize
