Description: Fix compatibility issues with Texinfo 5
 Fixes various issues with @itemx and @deftypefnx.
 Also replace the @format section by a @direntry for octave.texi, otherwise
 one gets a lintian error for info section.
Author: SÃ©bastien Villemot <sebastien@debian.org>
Bug: https://savannah.gnu.org/bugs/?38392
Last-Update: 2013-05-14
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -39,7 +39,7 @@
 ## @item %s
 ## The word is parsed as a string.
 ##
-## @itemx %f
+## @item  %f
 ## @itemx %n
 ## The word is parsed as a number and converted to double.
 ##
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -2545,15 +2545,15 @@
 A character indicating a plot marker to be place at each data point, or
 @code{"none"}, meaning no markers should be displayed.
 
-@itemx markeredgecolor
+@item markeredgecolor
 The color of the edge around the marker, or @code{"auto"}, meaning that
 the edge color is the same as the face color.  @xref{Colors}.
 
-@itemx markerfacecolor
+@item markerfacecolor
 The color of the marker, or @code{"none"} to indicate that the marker
 should not be filled.  @xref{Colors}.
 
-@itemx markersize
+@item markersize
 A number specifying the size of the marker.  The default is 1.  A value
 of 2 is twice as large as the default, etc.
 @end table
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -18,7 +18,8 @@
 ## @deftypefn {Function File} {@var{value} =} getappdata (@var{h}, @var{name})
 ## Return the @var{value} for named application data for the object(s) with
 ## handle(s) @var{h}.
-## @deftypefnx {Function File} {@var{appdata} =} getappdata (@var{h})
+## @end deftypefn
+## @deftypefn {Function File} {@var{appdata} =} getappdata (@var{h})
 ## Return a structure, @var{appdata}, whose fields correspond to the appdata
 ## properties.
 ## @end deftypefn
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -21,17 +21,21 @@
 ## Set the data aspect ratio of the current axes.  The aspect ratio is
 ## a normalized 3-element vector representing the span of the x, y, and
 ## z-axes limits.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{data_aspect_ratio} =} daspect ( )
+## @deftypefn {Function File} {@var{data_aspect_ratio} =} daspect ( )
 ## Return the data aspect ratio of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} daspect (@var{mode})
+## @deftypefn {Function File} {} daspect (@var{mode})
 ## Set the data aspect ratio mode of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{data_aspect_ratio_mode} =} daspect ("mode")
+## @deftypefn {Function File} {@var{data_aspect_ratio_mode} =} daspect ("mode")
 ## Return the data aspect ratio mode of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} daspect (@var{hax}, @dots{})
+## @deftypefn {Function File} {} daspect (@var{hax}, @dots{})
 ## Use the axes, with handle @var{hax}, instead of the current axes.
 ##
 ## @seealso{axis, pbaspect, xlim, ylim, zlim}
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -86,7 +86,7 @@
 ## @item "hide"
 ##   Hide legend on the plot
 ##
-## @itemx "toggle"
+## @item "toggle"
 ##   Toggles between "hide" and "show"
 ##
 ## @item "boxon"
@@ -101,7 +101,7 @@
 ## @item "right"
 ##   Place text to the right of the keys
 ##
-## @itemx "off"
+## @item "off"
 ##   Delete the legend object
 ## @end table
 ## @end deftypefn
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -21,17 +21,21 @@
 ## Set the plot box aspect ratio of the current axes.  The aspect ratio
 ## is a normalized 3-element vector representing the rendered lengths of
 ## the x, y, and z-axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{plot_box_aspect_ratio} =} pbaspect ( )
+## @deftypefn {Function File} {@var{plot_box_aspect_ratio} =} pbaspect ( )
 ## Return the plot box aspect ratio of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} pbaspect (@var{mode})
+## @deftypefn {Function File} {} pbaspect (@var{mode})
 ## Set the plot box aspect ratio mode of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{plot_box_aspect_ratio_mode} =} pbaspect ("mode")
+## @deftypefn {Function File} {@var{plot_box_aspect_ratio_mode} =} pbaspect ("mode")
 ## Return the plot box aspect ratio mode of the current axes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} pbaspect (@var{hax}, @dots{})
+## @deftypefn {Function File} {} pbaspect (@var{hax}, @dots{})
 ## Use the axes, with handle @var{hax}, instead of the current axes.
 ##
 ## @seealso{axis, daspect, xlim, ylim, zlim}
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -187,11 +187,11 @@
 ## is sent to a file the size is determined by the plot box defined by
 ## the figure's "paperposition" property.
 ##
-## @itemx -append
+## @item -append
 ##   Appends the PS, or PDF output to a pre-existing file of the
 ## same type.
 ##
-## @itemx -r@var{NUM}
+## @item -r@var{NUM}
 ##   Resolution of bitmaps in pixels per inch.  For both metafiles and
 ## SVG the default is the screen resolution, for other it is 150 dpi.
 ## To specify screen resolution, use "-r0".
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -21,18 +21,22 @@
 ## Load the RIFF/WAVE sound file @var{filename}, and return the samples
 ## in vector @var{y}.  If the file contains multichannel data, then
 ## @var{y} is a matrix with the channels represented as columns.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@var{y}, @var{Fs}, @var{bps}] =} wavread (@var{filename})
+## @deftypefn {Function File} {[@var{y}, @var{Fs}, @var{bps}] =} wavread (@var{filename})
 ## Additionally return the sample rate (@var{fs}) in Hz and the number of bits
 ## per sample (@var{bps}).
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
+## @deftypefn {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
 ## Read only the first @var{n} samples from each channel.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n1} @var{n2})
+## @deftypefn {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n1} @var{n2})
 ## Read only samples @var{n1} through @var{n2} from each channel.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@var{samples}, @var{channels}] =} wavread (@var{filename}, "size")
+## @deftypefn {Function File} {[@var{samples}, @var{channels}] =} wavread (@var{filename}, "size")
 ## Return the number of samples (@var{n}) and channels (@var{ch})
 ## instead of the audio data.
 ## @seealso{wavwrite}
--- a/scripts/miscellaneous/license.m
+++ b/scripts/miscellaneous/license.m
@@ -19,19 +19,23 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} license
 ## Display the license of Octave.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} license ("inuse")
+## @deftypefn {Function File} {} license ("inuse")
 ## Display a list of packages currently being used.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{retval} =} license ("inuse")
+## @deftypefn {Function File} {@var{retval} =} license ("inuse")
 ## Return a structure containing the fields @code{feature} and @code{user}.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{retval} =} license ("test", @var{feature})
+## @deftypefn {Function File} {@var{retval} =} license ("test", @var{feature})
 ## Return 1 if a license exists for the product identified by the string
 ## @var{feature} and 0 otherwise.  The argument @var{feature} is case
 ## insensitive and only the first 27 characters are checked.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} license ("test", @var{feature}, @var{toggle})
+## @deftypefn {Function File} {} license ("test", @var{feature}, @var{toggle})
 ## Enable or disable license testing for @var{feature}, depending on
 ## @var{toggle}, which may be one of:
 ##
@@ -43,8 +47,9 @@
 ## @item "disable"
 ## Future tests for the specified license of @var{feature} return 0.
 ## @end table
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{retval} =} license ("checkout", @var{feature})
+## @deftypefn {Function File} {@var{retval} =} license ("checkout", @var{feature})
 ## Check out a license for @var{feature}, returning 1 on success and 0
 ## on failure.
 ##
--- a/scripts/miscellaneous/ver.m
+++ b/scripts/miscellaneous/ver.m
@@ -21,8 +21,9 @@
 ## Display a header containing the current Octave version number, license
 ## string and operating system, followed by the installed package names,
 ## versions, and installation directories.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {v =} ver ()
+## @deftypefn {Function File} {v =} ver ()
 ## Return a vector of structures, respecting Octave and each installed package.
 ## The structure includes the following fields.
 ##
@@ -39,11 +40,13 @@
 ## @item Date
 ## Date respecting the version/revision.
 ## @end table
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {v =} ver ("Octave")
+## @deftypefn {Function File} {v =} ver ("Octave")
 ## Return version information for Octave only.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {v =} ver (@var{package})
+## @deftypefn {Function File} {v =} ver (@var{package})
 ## Return version information for @var{package}.
 ##
 ## @seealso{version, octave_config_info}
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -24,8 +24,9 @@
 ## (@var{x}-@var{mu}(1))/@var{mu}(2).
 ## If @var{x} is a vector or matrix, the polynomial is evaluated for each of
 ## the elements of @var{x}.
+## @end deftypefn
 ## 
-## @deftypefnx {Function File} {[@var{y}, @var{dy}] =} polyval (@var{p}, @var{x}, @var{s})
+## @deftypefn {Function File} {[@var{y}, @var{dy}] =} polyval (@var{p}, @var{x}, @var{s})
 ## @deftypefnx {Function File} {[@var{y}, @var{dy}] =} polyval (@var{p}, @var{x}, @var{s}, @var{mu})
 ## In addition to evaluating the polynomial, the second output
 ## represents the prediction interval, @var{y} +/- @var{dy}, which
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -43,8 +43,9 @@
 ##        3   4
 ## @end group
 ## @end example
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} union (@var{a}, @var{b})
+## @deftypefn {Function File} {[@var{c}, @var{ia}, @var{ib}] =} union (@var{a}, @var{b})
 ##
 ## Return index vectors @var{ia} and @var{ib} such that @code{a(ia)} and
 ## @code{b(ib)} are disjoint sets whose union is @var{c}.
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -48,17 +48,20 @@
 ##
 ## For fastest computation, @var{n} should factor into a small number of
 ## small primes.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
+## @deftypefn {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
 ## Evaluate the response at the specific frequencies in the vector @var{w}.
 ## The values for @var{w} are measured in radians.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
+## @deftypefn {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
 ## Return frequencies in Hz instead of radians assuming a sampling rate
 ## @var{Fs}.  If you are evaluating the response at specific frequencies
 ## @var{w}, those frequencies should be requested in Hz rather than radians.
+## @end deftypefn
 ##
-## @deftypefnx {Function File} {} freqz (@dots{})
+## @deftypefn {Function File} {} freqz (@dots{})
 ## Plot the pass band, stop band and phase response of @var{h} rather
 ## than returning them.
 ## @end deftypefn
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -555,9 +555,9 @@
 interpreted as filename globbing patterns (as they are used by Unix shells).\n\
 Within a pattern\n\
 @table @code\n\
-@itemx *\n\
+@item *\n\
 matches any string, including the null string,\n\
-@itemx ?\n\
+@item ?\n\
 matches any single character, and\n\
 \n\
 @item [@dots{}]\n\
--- a/doc/liboctave/liboctave.texi
+++ b/doc/liboctave/liboctave.texi
@@ -81,10 +81,10 @@
 @end ifnottex
 
 @titlepage
-@title{Octave C++ Classes}
-@subtitle{Edition 1.0 for Octave version @value{VERSION}}
-@subtitle{September 1993}
-@author{John W. Eaton}
+@title Octave C++ Classes
+@subtitle Edition 1.0 for Octave version @value{VERSION}
+@subtitle September 1993
+@author John W. Eaton
 @page
 @vskip 0pt plus 1filll
 Copyright @copyright{} 1996, 1997 John W. Eaton.
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -62,12 +62,9 @@
 
 @ifinfo
 @dircategory Math
-@format
-START-INFO-DIR-ENTRY
+@direntry
 * Octave: (octave).           Interactive language for numerical computations.
-
-END-INFO-DIR-ENTRY
-@end format
+@end direntry
 @end ifinfo
 
 @c Settings for printing on 8-1/2 by 11 inch paper:
